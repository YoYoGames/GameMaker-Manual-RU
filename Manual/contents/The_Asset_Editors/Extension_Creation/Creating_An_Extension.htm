<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Создание расширения</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Создание расширения</h1>
  <p>Чтобы создать расширение, сначала нужно щелкнуть правой кнопкой мыши <img> в любом месте <a href="../../Introduction/The_Asset_Browser.htm">браузера активов</a> и выбрать <strong>Создать -&gt; Расширение</strong>. Это откроет свойства расширения для только что созданного актива в рабочей области:</p>
  <p><img>Если вы не видите этого, вы можете дважды щелкнуть на активе расширения в браузере активов, чтобы открыть окно его свойств или сфокусироваться на нем, когда оно уже открыто.</p>
  <p>Теперь все готово для добавления необходимых файлов и функций. Здесь же вы можете дать расширению имя (следуя обычному соглашению: только буквы/цифры и никаких специальных символов, кроме знака подчеркивания &quot;_&quot;). При желании вы можете задать номер версии расширения.</p>
  <p>В разделе &quot;Copies To&quot; вы можете выбрать платформы, на которые будет экспортировано данное расширение. Для простого расширения <span class="notranslate">GML</span> вам не нужно беспокоиться об этом, так как оно будет работать на всех платформах, однако если вы создаете расширение для конкретной платформы (например, для <span class="notranslate">Android</span>), вам нужно убедиться, что оно <em>не</em> экспортируется на несовместимые платформы (например, <span class="notranslate">iOS</span>, консоли и т.д.).</p>
  <h2>Файлы-заполнители</h2>
  <p>Чтобы добавить файл в новое расширение, нужно щелкнуть значок меню <img> и выбрать либо файл-местодержатель (&quot;Add Placeholder&quot;), либо импортировать фактический файл, необходимый для целевой платформы (&quot;Add File&quot;):</p>
  <p class="dropspot"><img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /></p>
  <p>Общий&quot; файл-заполнитель - это файл, который может быть любого типа, кроме тех, которые требуются для конкретных платформ (например, никаких файлов <span class="inline">DLL</span> или <span class="inline">SO </span>), и он не будет использоваться, кроме как в качестве файла &quot;компоновщика&quot; для подключения набора функций или констант с данным расширением (как правило, он предназначен только для использования с расширениями <span class="notranslate">iOS</span> и <span class="notranslate">Android</span>, что объясняется в разделах ниже для этих целей). Вы также можете добавить файлы-заполнители &quot;GML&quot; и &quot;JS&quot; для более специфического использования.</p>
  <h2>Добавление файлов</h2>
  <p>Обычно вам не нужно использовать заполнители, если вы не собираете для <span class="notranslate">iOS</span> и <span class="notranslate">Android</span>, поэтому вы выбираете опцию &quot;Add File&quot;, чтобы добавить любой из следующих файлов в зависимости от целевой платформы, для которой они предназначены:</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: Это файл, созданный только с помощью <span class="notranslate">GameMaker Language</span> и совместимый со всеми платформами.</li>
    <li class="dropspot"><span class="inline">.js</span>: Это формат расширения JavaScript и совместим только с HTML5.</li>
    <li class="dropspot"><span class="inline">.dll</span>: Это формат расширения динамически подключаемой библиотеки, совместимый только с целями <span class="notranslate">Windows</span>, UWP и Xbox (для каждой цели потребуется свой файл <span class="inline">*.dll</span>, совместимый с ее спецификациями).</li>
    <li class="dropspot"><span class="inline">.dylib</span>: Это эквивалент DLL для Mac и совместим только с Mac target (не <span class="notranslate">iOS</span>).</li>
    <li class="dropspot"><span class="inline">.so</span>: Это <span class="notranslate">Linux</span> эквивалент DLL и совместим только с целью <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>).</li>
    <li class="dropspot"><span class="inline">.prx</span>: Это формат файла для добавления функциональности к цели PlayStation (для каждой цели потребуется свой файл <span class="inline">*.prx</span>, совместимый с ее спецификациями).</li>
  </ul>
  <p>Вы заметите, что здесь нет типа файла для <strong>Android </strong>или <strong>iOS</strong>, потому что их настройка немного отличается. Далее вы найдете объяснения, как их настроить, но сначала давайте рассмотрим создание общего расширения <span class="notranslate">GML</span> для любой из целевых платформ, поскольку процесс для всех них одинаков.</p>
  <h2>Создание расширения <span class="notranslate">GML</span> </h2>
  <p>Для начала необходимо создать файл, который будет использоваться. Для расширения <span class="notranslate">GML</span> это будет текстовый файл (сохраненный с расширением <span class="inline">.gml</span> ), который будет иметь следующий формат:</p>
  <p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p>
  <p>Как видите, мы начинаем каждый раздел с вызова <span class="inline">#define</span>, который в приведенном выше примере используется для определения двух функций. Давайте рассмотрим каждую часть определяемой функции:</p>
  <ul class="colour">
    <li>Оператор <span class="inline">#define</span> используется для определения новой функции с заданным именем;</li>
    <li>За этим утверждением следует код функции, который использует переменные <span class="inline">argument0</span>, <span class="inline">argument1</span> и т.д. для доступа к аргументам, переданным в функцию при ее вызове;</li>
    <li>В конце у нас есть <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a> который используется для возврата данных из расширения обратно в код <span class="notranslate">GML</span>, где была вызвана функция.</li>
  </ul>
  <p>Если бы вы писали расширение <span class="inline">DLL</span> или JavaScript, то процесс был бы аналогичным, но на языке, соответствующем формату файла расширения.</p>
  <p>После этого необходимо добавить файл в расширение (с помощью опции &quot;Добавить файл&quot;), что вызовет новое окно в Свойствах расширений для Свойств файла:</p>
  <p class="dropspot"><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /></p>
  <p>Здесь вы можете выбрать целевую платформу для расширения (для GML вы можете выбрать их все), а также переименовать файл расширения и задать несколько других деталей, которые мы рассмотрим чуть позже.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Добавление файла в расширение копирует его в каталог проекта, что означает, что любые дальнейшие изменения должны быть внесены в эту копию, чтобы они были видны в игре. Вы можете найти копию, щелкнув правой кнопкой мыши на расширении в браузере активов и выбрав &quot;Открыть в проводнике&quot;.</p>
  <h2>Добавление функций</h2>
  <p>Редактор должен автоматически заполниться функциями, включенными в наш файл <span class="notranslate">GML</span>, но если это не так, то вы можете добавить их вручную, нажав на кнопку меню функций <img> и выбрав то, что вам нужно:</p>
  <p class="dropspot"><img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /></p>
  <p>Выбор пункта &quot;Добавить функцию&quot; позволит вам добавить в расширение функцию, которая затем может быть вызвана в <span data-keyref="GameMaker Name">GameMaker</span> так же, как и любая из встроенных функций. <span>После добавления функции откроется следующее окно для определения свойств функции (или вы можете дважды щелкнуть на функции, чтобы открыть ее):</span></p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>На рисунке выше мы заполнили редактор функций деталями для функции <span class="inline">instance_create_colour()</span>, которую мы определили в нашем файле расширения <span class="notranslate">GML</span> (обратите внимание, что это окно редактора функций предназначено не только для определения функций <span class="notranslate">GML</span> - оно будет одинаковым для всех типов расширений). Давайте рассмотрим каждый параметр, который может быть определен для функции:</p>
  <ul class="colour">
    <li>Вы можете видеть, что мы задали функции <em>имя</em>, которое вы будете использовать при вызове функции в вашем проекте; обратите внимание, что это имя не обязательно должно совпадать с именем, используемым в расширении - вы можете назвать ее как угодно, а затем использовать поле <em>External Name</em> для связи с реальным именем, определенным в расширении:<img></li>
    <li>Ниже находится раздел для определения текста <em>справки </em>- текста, который будет отображаться во всплывающем окне завершения кода и вспомогательном тексте в нижней части редактора кода.</li>
    <li>Далее вы можете определить <em>тип возврата</em>, который может быть <strong>двойным </strong>(вещественное число с <a class="glossterm" data-glossterm="плавающая запятая" href="#">плавающей точкой</a> ) или <strong>строкой</strong>; если внешняя функция ничего не возвращает, то это не имеет значения.</li>
    <li>Под ним вы определяете аргументы, которые будет принимать функция. Эти аргументы могут быть <strong>двойными </strong>или <strong>строками</strong>, и вы можете добавить их, нажав кнопку add <img>, и удалить, нажав кнопку remove <img>.<br>
      <br>
      Если ваша функция может принимать переменное количество аргументов (то есть у нее есть необязательные аргументы), вам следует установить флажок &quot;Аргументы переменной длины&quot; внизу.
    </li>
  </ul>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Если функция является частью встроенного расширения для <span class="notranslate">Windows</span>, Mac или <span class="notranslate">Ubuntu</span> (<span class="inline">dll</span>, <span class="inline">dylib</span> или <span class="inline">so</span> соответственно) и имеет более четырех аргументов, <strong>все аргументы должны быть одного типа</strong>.</p>
  <p>После этого функция готова к использованию в проекте; теперь она будет отображаться в автозаполнении и будет выделена цветом:</p>
  <p><img>Определенные функции можно также установить как <strong>начальные (Init Functions</strong> ) или <strong>конечные (Final Functions</strong>), что означает, что они будут вызываться автоматически при начале игры (Init) и при завершении игры (Final).</p>
  <p class="note"><strong>ВАЖНО!</strong> Все платформы поддерживают вызов функции Init, <strong>но не все платформы будут выполнять вызов функции Final.</strong> Это связано с тем, что некоторые платформы просто закрывают приложение, не давая никакого уведомления или времени для вызова этой функции. В основном это касается таких платформ, как <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>и <strong>Xbox</strong>.</p>
  <h2>Макросы</h2>
  <p>Другой вариант - создать <strong>макрос</strong>. Макрос может быть как <a class="glossterm" data-glossterm="постоянная" href="#">постоянным</a> значением, так и коротким фрагментом кода (более подробную информацию о макросах можно найти <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">здесь</a>). Например, мы можем удалить функцию <span class="inline">c_alice_blue</span> из нашего ранее определенного расширения <span class="notranslate">GML</span> и сделать ее макросом. Чтобы создать макрос, можно просто нажать на кнопку &quot;Макросы&quot; в Свойствах расширения, в результате чего откроется следующее окно:</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>Редактор здесь практически ничего не объясняет: вы указываете имя макроса и его постоянное значение или короткую строку кода. Обратите внимание, что если макрос представляет собой строку кода, <strong>она будет оцениваться каждый раз при вызове макроса</strong>.</p>
  <h2 id="h1">Создание опций расширения</h2>
  <p>Нажмите на значок шестеренки рядом с &quot;<strong>Параметры расширений</strong>&quot;, чтобы создать или изменить параметры для ваших расширений:</p>
  <p><img>После нажатия кнопки &quot;<strong>Да</strong>&quot; на запрос подтверждения вы увидите новое окно, в котором можно добавить новые параметры расширения:</p>
  <p><img>Каждому параметру расширения можно присвоить имя, значение по умолчанию и тип данных. Имя - это то, что вы будете использовать внутри кода расширения для получения значения опции.</p>
  <p>Помимо добавления опций с помощью &quot;Add Option&quot;, вы можете добавлять разделы с помощью &quot;Add Section&quot;. Раздел - это <strong>не</strong> опция, а только заголовок, отображаемый в главном окне редактора расширений. Используйте эту функцию, если у вас много опций и вы хотите очистить список опций, который видит конечный пользователь.</p>
  <p>Можно создать следующие типы опций:</p>
  <ul class="colour">
    <li><strong>Булево</strong>: Создает флажок "истина/ложь".</li>
    <li><strong>Число</strong>: Это действительное число.</li>
    <li><strong>Строка</strong>: Это текстовая строка.</li>
    <li><strong>FilePath</strong>: Это путь к файлу. Он позволяет вам использовать проводник вашей ОС для поиска файла.</li>
    <li><strong>FolderPath</strong>: Это путь к папке/каталогу. Он позволяет вам использовать проводник вашей ОС для поиска папки.</li>
    <li><strong>Список</strong>: Это выпадающий список, из которого можно выбрать один элемент из заранее определенного списка элементов.</li>
  </ul>
  <p>Вы также можете щелкнуть на значке <img> рядом с опцией, чтобы дать ей дополнительное <strong>отображаемое имя</strong> и <strong>описание</strong> (которое появляется в виде всплывающей подсказки при наведении на отображаемое имя).</p>
  <p>В окне дополнительных возможностей вы также можете выбрать экспорт этой опции в файл <strong>options.ini</strong>, поставляемый вместе с игрой.</p>
  <p>Наконец, вы можете скрыть опцию из редактора, сделав ее невидимой для конечного пользователя, использующего расширение.</p>
  <h3>Использование опций расширения</h3>
  <p>Вы можете получить значения опций расширения во время выполнения с помощью <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">функций расширения</a>.</p>
  <p>Вы также можете получить опции расширения в <a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">пакетных файлах / скриптах компилятора</a>, используя имя <span class="inline2">YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;</span>.</p>
  <p>Опции расширения будут доступны во время выполнения, только если расширение имеет функции, которые используются во время выполнения. Однако опции всегда будут экспортироваться в INI-файл (если опция включена) и пакетные сценарии независимо от использования расширения.</p>
  <h2>Прокси-файлы</h2>
  <p>При работе с несколькими целевыми платформами стоит отметить, что вы можете создать одно расширение с одним набором функций/макросов, которое будет работать на <em>всех </em>платформах. Это достигается путем добавления только одной из библиотек ссылок в вашу игру в качестве расширения и размещения другой(их) в списке <strong>Proxy Files</strong> в окне <strong>Extension Properties</strong>.</p>
  <p><img>Например, допустим, у вас есть расширение <span class="notranslate">Windows</span> с расширением <span class="inline"> <strong>dll </strong></span>&quot;<span class="inline">Haggis.dll</span>&quot;. Вы просто скопируете этот <span class="inline"> <strong>dll</strong></span> как Mac <span class="inline"> <strong>DyLib</strong></span>, назвав его &quot;<span class="inline"><strong>libHaggis.dylib</strong></span>&quot; и убедившись, что имена внутренних функций совпадают с именами исходного <span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span>. Этот <strong> <span class="inline">DyLib</span> </strong>затем добавляется в файлы прокси и устанавливается на экспорт при запуске игры на Mac, и <span data-keyref="GameMaker Name">GameMaker</span> автоматически использует его при вызове функций расширения.</p>
  <p>Чтобы добавить прокси-файл, достаточно нажать кнопку <img> в окне свойств выбранного файла ресурсов и перейти к расположению файла. После его добавления вам может понадобиться обновить цели расширения, чтобы добавить соответствующий модуль, и при следующем запуске вашей игры он будет включен в качестве прокси для этой платформы. Вы также можете удалить прокси-файлы, нажав на кнопку <img>, которая удалит выбранный прокси-файл.</p>
  <p>После добавления прокси-файлов они будут скопированы в папку Extensions вашего проекта (вы можете найти их, щелкнув правой кнопкой мыши <img> на расширении и выбрав <em>Open in Explorer</em>), поэтому, если вам нужно их отредактировать, вы должны редактировать скопированные файлы, которые идут в комплекте с игрой, а не исходный файл, который был импортирован, так как <span data-keyref="GameMaker Name">GameMaker</span> будет использовать те, которые находятся в проекте для компиляции.</p>
  <h2 id="h">Соглашения об именовании</h2>
  <p>Очень важно, чтобы ваши прокси-файлы соответствовали приведенным ниже соглашениям об именовании, поскольку <span data-keyref="GameMaker Name">GameMaker</span> будет анализировать эти имена и назначать целевой модуль для файла в соответствии с его расширением и именем, а также автоматически связывать файлы для вас. Если вы не будете следовать этим соглашениям, ваша игра может не работать во время выполнения, поскольку <span data-keyref="GameMaker Name">GameMaker</span> не сможет определить, какой файл использовать, и не загрузит его должным образом.</p>
  <p>Ниже приведены соглашения об именовании для каждой целевой платформы:</p>
  <table>
    <colgroup>
      <col style="width: 173px;" />
      <col style="width: 715px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>Платформа</th>
        <th>Имена</th>
      </tr>
      <tr>
        <td>Windows 32bit Runtime</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64bit Runtime</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>UWP</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll</td>
      </tr>
      <tr>
        <td>Ubuntu (<span class="notranslate">Linux</span>)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so,<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so,<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_arm.so,<br>
            <br>
            &lt;<em>Имя&gt;_arm64</em>.so, lib&lt;<em>Имя&gt;_arm64</em>.so, lib&lt;<em>Имя&gt;_linux_arm64</em>.so,<br>
            <br>
           <em>&lt;Имя&gt;_arm64-v8</em>.so,<br>
           <em>lib&lt;Имя&gt;_arm64-v8</em>.so, lib&lt;Имя&gt;_linux_arm64-v8.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_armeabi-v7a.so</td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>PS4</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox One</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span><em>&lt;Имя&gt;_xboxone</em>.dll</td>
      </tr>
      <tr>
        <td>Xbox Series X|S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span><em>&lt;Имя&gt;_xboxseriesxs</em>.dll</td>
      </tr>
    </tbody>
  </table>
  <p>Используя вышеприведенные соглашения, вы замените часть <span class="inline">&lt;<em>Name</em>&gt;</span> на имя базового файла, для которого вы добавляете прокси-файлы.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Extensions.htm">Редактор расширений</a></div>
        <div style="float:right">Следующее: <a href="Android_Extensions.htm">Расширения для Android</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>