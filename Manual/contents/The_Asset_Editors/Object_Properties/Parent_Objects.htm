<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<<<<<<< HEAD
  <title>Родительские объекты</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
=======
  <title>Parent Objects</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
>>>>>>> e8f331b1b74476a144e051c0d836bf120b342735
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object parenting" />
  <meta name="rh-index-keywords" content="Objects - Parents" />
  <meta name="search-keywords" content="parent,child,inheritance,object parenting" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
<<<<<<< HEAD
  <h1>Родительские объекты</h1>
  <p>При работе с объектами в <span data-keyref="GameMaker Name">GameMaker</span> <span class="notranslate">IDE</span> можно установить иерархию " <strong>родитель/ребенок </strong>". Для этого нужно нажать кнопку &quot;Parent&quot; в редакторе объектов, а затем выбрать другой объект из браузера ассетов.
    который будет &quot;родителем&quot; редактируемого объекта:</p>
  <p><img>Итак, каждый объект в вашем игровом проекте может иметь родительский объект, но что это значит? Когда у объекта есть родительский объект, он может
    обмениваться кодом, действиями и событиями с этим родителем. Такой обмен называется &quot;наследованием&quot;, а объект, у которого есть родитель, называется &quot;дочерним&quot;. Дочерний объект не только может делиться кодом со своим родителем, но вы можете выполнять проверки и запускать код
    на родительских объектах, и он будет автоматически включать и дочерние объекты, что экономит много времени и энергии.</p>
  <p>Если это звучит сложно, то другой способ взглянуть на родительский объект - это способ &quot;сгруппировать&quot; объекты под одним зонтиком, чтобы они имели общие черты, не теряя при этом своей уникальной индивидуальности. Возможно, это все еще не
    проясняет ситуацию, поэтому давайте приведем несколько примеров...</p>
  <p>Допустим, у вас есть объект &quot;игрок&quot; и четыре различных объекта &quot;враг&quot;. Теперь вы хотите, чтобы игрок умер, если он коснется любого из этих четырех объектов, и это обычно влечет за собой четыре различных события столкновения с четырьмя различными наборами
    действий или кода, по одному для каждого из вражеских объектов. Но если мы создадим родительский объект для всех врагов, то мы сможем создать одно событие столкновения только с родительским объектом, и оно сработает независимо от того, какой из четырех &quot;дочерних&quot; вражеских объектов коснется игрока.
    коснется игрока. Удобная штука! В реальном объекте <span data-keyref="GameMaker Name">GameMaker</span> вы увидите примерно следующее:</p>
  <p><img>Слева у нас есть четыре отдельных события столкновения, а справа - одно событие столкновения, поскольку мы создали
    &quot;родительский&quot; объект и назначили ему все вражеские объекты. Обратите внимание, что родительский объект не должен иметь никаких событий или кода в нем...</p>
  <p>Другим примером родительского поведения может быть игра, в которой вы хотите создать 10 различных по внешнему виду объектов и заставить их всех вести себя одинаково. Для этого вы создадите один родительский объект и в нем все ваши поведенческие действия или код
    в нужных событиях, а затем вы создадите десять объектов без действий или кода, но с разными <span class="notranslate">sprites</span>, и назначите им родительский объект. Теперь, когда вы поместите эти экземпляры в комнату, все они будут вести себя одинаково, но выглядеть по-разному,
    поскольку они &quot;наследуют&quot; события родительского объекта.</p>
  <p>Наконец, вы можете использовать воспитание, чтобы &quot;смешивать и сопоставлять&quot; события и поведение. Мы проиллюстрируем это на последнем примере... Допустим, вам нужны два монстра: один двигается вверх и вниз, а другой - влево и вправо.
    чтобы они имели одинаковое здоровье, стреляли в игрока и ранили игрока при столкновении с ними. В этом случае вы видите, что почти все события должны иметь одинаковые действия, за исключением одного или двух, которые управляют движением. Итак, опять же, мы можем сделать
    один объект родителем другого, но в этом случае мы также определяем определенные события для дочернего объекта. Эти события &quot;переопределяют&quot; родительские события, то есть всякий раз, когда событие для дочернего объекта содержит действия, они выполняются
    вместо действий, содержащихся в событии родителя. Если вы также хотите выполнить родительское событие, вы можете вызвать так называемое &quot;унаследованное&quot; событие с помощью функции <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>,
    или визуальное действие <span class="notranslate">GML</span> <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>.</p>
  <p><img>Слева вверху находится родительский объект с 5 событиями в нем, а справа вы видите &quot;дочерний&quot; объект. Дочерний объект
    также имеет 5 событий, но два из них переопределяют унаследованные от родителя события (события <strong>Step </strong>и <strong>Draw </strong>), а три других выделены серым цветом, так как они являются событиями, унаследованными от родителя. Унаследованные события
    также будут иметь значок &quot;переопределение родителя&quot; рядом с ними в редакторе событий:</p>
  <p><img>Когда вы нажимаете <img> на унаследованное событие,
    откроется редактор кода, в котором будет показан унаследованный родительский код, но вы не сможете редактировать этот код, так как его можно редактировать только в самом родительском объекте. Вы можете нажать правую кнопку мыши <img> на любом из родительских событий, чтобы открыть следующее меню опций:</p>
  <p><img>Здесь вы можете выбрать два варианта <strong>Открыть </strong>родительское событие, чтобы просмотреть код, или же вы можете выбрать <strong>Наследовать </strong>событие
    событие или <strong>переопределить </strong>событие. Если вы выберете <strong>Наследовать </strong>, то редактор кода откроется с функцией <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> уже
    (или действием <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>, если вы используете <span class="notranslate">GML</span> Visual). Любой последующий код, который вы поместите в это событие, теперь будет выполняться так же, как и код родительского объекта.
    имеет. Если вы выберете <strong>Переопределить </strong>событие, то окно кода также откроется, только теперь функция <span class="inline">event_inherited()</span> не будет вызываться, поэтому все, что вы добавите сюда, будет выполняться <em>вместо </em>кода
    в родительском объекте.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Из редактора кода вы можете быстро перейти к родительскому объекту, нажав правую кнопку мыши <img> и выбрав <strong>Go To Object</strong> из всплывающего меню, или (если событие было переопределено) вы можете выбрать <strong>Open Inherited Event</strong>, чтобы перейти непосредственно в редактор кода с кодом родительского события в нем.</p>
  <p>Когда в коде вы нацеливаетесь на родительский объект, код будет применяться и к &quot;детям&quot; родительского объекта. Это происходит, когда в действии вы указываете, что действие должно быть применено к экземплярам определенного объекта, а в коде это
    происходит, когда вы используете <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> оператор. Это будет работать и при вызове функций кода, таких как <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>,
    <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, и т.д., где - если вы предоставите родительский объект - все экземпляры родительского <em>и </em>дочернего экземпляров
    будут включены в проверку. И наконец, родительские функции работают, когда вы ссылаетесь на переменные в других объектах, как в приведенном выше примере с монстром, если я установлю скорость врага 1 равной 10, то скорость врага 2 также будет равна десяти, поскольку он является дочерним объектом врага
    1.</p>
  <p>Обычно считается хорошей практикой в большинстве случаев создавать один базовый родительский объект, чтобы этот базовый объект содержал все поведение по умолчанию, но никогда не использовать его экземпляр в игре. Лучше использовать все дочерние объекты и использовать родительский объект только в ситуациях, подобных тем, что я описал выше.
    ситуациях, подобных тем, которые я описал выше, для столкновений, для ссылок на переменные и т.д... Вы также должны понимать, что у родителей тоже могут быть родители! Очевидно, что вы не можете создать цикл &quot;родитель 1 является ребенком родителя 2 является ребенком родителя
    1&quot;, но вы можете создать так называемую &quot;иерархию объектов&quot;, где &quot;<em>родитель 3 </em>является ребенком <em>родителя 2 </em>является ребенком <em>родителя 1</em>&quot;. Это чрезвычайно полезно для структурирования вашей игры, и вам настоятельно рекомендуется
    научиться использовать этот механизм.</p>
  <p> </p>
  <p> </p>
  <p> </p>
=======
  <h1><span data-field="title" data-format="default">Parent Objects</span></h1>
  <p>When working with objects in the <span data-keyref="GameMaker Name">GameMaker</span> IDE, you can set up <strong>Parent </strong>/ Child hierarchies. This is done by clicking the &quot;Parent&quot; button in the object editor and then choosing another object from the Asset Browser to be the &quot;parent&quot; of the one being edited:</p>
  <p><img alt="Adding A Parent" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Parent.png" />So, every object in your game project can have a parent object, but what does this mean? Well, when an object has a parent assigned it can share code, actions and events with that parent. This sharing is called &quot;inheritance&quot; and an object that has a parent is called a &quot;child&quot; object. Not only can a child share code with its parent, but you can do checks and run code on parent objects and it will automatically include the child objects too, which saves a lot of time and energy.</p>
  <p>If that sounds complicated, then another way to look at a parent object is as a way to &quot;group&quot; objects together under the same umbrella and have them share certain things without losing their own unique identity. Maybe that still doesn&#39;t clarify things too much, so let&#39;s give some examples...</p>
  <p>Say you have a &quot;player&quot; object and four different &quot;enemy&quot; objects. Now, you want the player to die if he touches any of these four objects and this would normally entail four different collision events with four different sets of actions or code, one for each of the enemy objects. BUT if we make a parent object for all the enemies, then we can create one collision event with the parent object only and it will trigger no matter which one of the four &quot;child&quot; enemy objects touch the player. Handy stuff! In the actual <span data-keyref="GameMaker Name">GameMaker</span> object you would see something like this:</p>
  <p><img alt="Parenting For Collisions" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentCollision.png" />On the left we have four separate collision events and on the right we have a single collision event, as we have created a &quot;parent&quot; object and assigned all the enemy objects to it. Note that a parent object doesn&#39;t have to have any events or code in it...</p>
  <p>Another example of parenting would be if you have a game where you want to create 10 different looking objects and have them all behave in the same way. For that you would create one parent object and in that have all your behaviour actions or code in the required events, and then you would create your ten objects with no actions or code, but different sprites, and assign them your parent object. Now, when you place these instances in a room they will all behave the same, but look different, since they will &quot;inherit&quot; the events of the parent.</p>
  <p>Finally you can use parenting to &quot;mix and match&quot; events and behaviours. We&#39;ll illustrate this with one final example... Say you want two monsters: one that moves up and down, while another that moves left and right, but you also want the two of them to have the same health, shoot at the player and hurt the player if they collide with them. In this case you can see that almost all events should have the same actions except for one or two that govern movement. So, again, we can make one object the parent of the other, but in this case we also define certain events for the child object. These events &quot;override&quot; the parent events, meaning that whenever an event for the child object contains actions, these are executed instead of the actions contained in the event of the parent. If you also want to execute the parent event you can call the so-called &quot;inherited&quot; event using the function <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>, or the GML Visual action <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>.</p>
  <p><img alt="Inheriting Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_InheritEvents.png" />On the left above is the parent object with 5 events in it, and on the right you can see the &quot;child&quot; object. The child object also has 5 events in it, but two of them override the inherited events from the parent (the <strong>Step </strong>and <strong>Draw </strong>events) and the other three are greyed out as they are the events inherited from the parent. Inherited events will also have the &quot;parent override&quot; icon beside them in the Event Editor:</p>
  <p><img alt="Parent Override" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_ParentOverride.png" />When you click <img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png" /> on an event that has been inherited, it will open the code editor to show the inherited parent code, but you will not be able to edit this code as you can only edit it in the parent object itself. You can click the right mouse button <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> on any of the parent events to open the following menu of options:</p>
  <p><img alt="Parent Event RMB Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_Parent_Menu.png" />Here you can choose two <strong>Open </strong>the parent event to inspect the code, or you can choose to <strong>Inherit </strong>the event or <strong>Override </strong>the event. If you choose <strong>Inherit </strong>then the code editor will open with the function <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> already added to it (or the <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a> action if using GML Visual). Any further code you place in this event will now be run as well as the code that the parent object has. If you choose to <strong>Override </strong>the event, then the code window will also open, only now the <span class="inline">event_inherited()</span> function won&#39;t be called, so anything you add here will be run <em>instead </em>of the code in the parent object.</p>
  <p class="note"><strong>NOTE</strong>: From the code editor you can quickly navigate to the parent object by clicking the right mouse button <img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /> and selecting <strong>Go To Object</strong> from the pop-up menu, or (if the event has been overridden) you can select <strong>Open Inherited Event</strong> to go directly to a code editor with the parent event code in it.</p>
  <p>Whenever you target a parent object in code, the code will also apply to the &quot;children&quot; of the parent object too. This happens when, in an action, you indicate that the action must be applied to instances of a certain object, and in code it happens when you use the <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> statement. It will work like this too when you call code functions, like <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>, <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, etc... where - if you supply a parent object - all instances of the parent <em>and </em>child instances will be included in the checks. Finally, parenting works when you refer to variables in other objects too, like in the above monster example if I set the enemy 1 speed to 10, then the enemy 2 speed will also go to ten as it is a child object of enemy 1.</p>
  <p>It is generally considered good practice in most cases to create one base parent object and have this base object contain all the default behaviour but never use an instance of it in the game. Rather use all child objects and only use the parent in situations like those I have outlined above, for collisions, for referencing variables, etc... You should also realise that parents can have parents too! Obviously you can&#39;t create a cycle of &quot;parent 1 is child of parent 2 is child of parent 1&quot; but you can create what is called &quot;object hierarchy&quot; where &quot;<em>parent3 </em>is child of <em>parent2 </em>is child of <em>parent1</em>&quot;. This is extremely useful to keep your game structured and you are strongly advised to learn to use this mechanism.</p>
  <p> </p>
  <p> </p>
  <p> </p>
>>>>>>> e8f331b1b74476a144e051c0d836bf120b342735
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Objects.htm">Редактор объектов</a></div>
        <div style="float:right">Следующее: <a href="Physics_Objects.htm">Физические объекты</a></div>
      </div>
    </div>
<<<<<<< HEAD
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
=======
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
>>>>>>> e8f331b1b74476a144e051c0d836bf120b342735
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>