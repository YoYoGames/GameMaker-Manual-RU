<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Родительские объекты</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object parenting" />
  <meta name="rh-index-keywords" content="Objects - Parents" />
  <meta name="search-keywords" content="parent,child,inheritance,object parenting" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Родительские объекты</h1>
  <p>При работе с объектами в <span data-keyref="GameMaker Name">GameMaker</span> <span class="notranslate">IDE</span> можно установить иерархию " <strong>родитель/ребенок </strong>". Для этого нужно нажать кнопку &quot;Parent&quot; в редакторе объектов, а затем выбрать другой объект из браузера ассетов.
    который будет &quot;родителем&quot; редактируемого объекта:</p>
  <p><img>Итак, каждый объект в вашем игровом проекте может иметь родительский объект, но что это значит? Когда у объекта есть родительский объект, он может
    обмениваться кодом, действиями и событиями с этим родителем. Такой обмен называется &quot;наследованием&quot;, а объект, у которого есть родитель, называется &quot;дочерним&quot;. Дочерний объект не только может делиться кодом со своим родителем, но вы можете выполнять проверки и запускать код
    на родительских объектах, и он будет автоматически включать и дочерние объекты, что экономит много времени и энергии.</p>
  <p>Если это звучит сложно, то другой способ взглянуть на родительский объект - это способ &quot;сгруппировать&quot; объекты под одним зонтиком, чтобы они имели общие черты, не теряя при этом своей уникальной индивидуальности. Возможно, это все еще не
    проясняет ситуацию, поэтому давайте приведем несколько примеров...</p>
  <p>Допустим, у вас есть объект &quot;игрок&quot; и четыре различных объекта &quot;враг&quot;. Теперь вы хотите, чтобы игрок умер, если он коснется любого из этих четырех объектов, и это обычно влечет за собой четыре различных события столкновения с четырьмя различными наборами
    действий или кода, по одному для каждого из вражеских объектов. Но если мы создадим родительский объект для всех врагов, то мы сможем создать одно событие столкновения только с родительским объектом, и оно сработает независимо от того, какой из четырех &quot;дочерних&quot; вражеских объектов коснется игрока.
    коснется игрока. Удобная штука! В реальном объекте <span data-keyref="GameMaker Name">GameMaker</span> вы увидите примерно следующее:</p>
  <p><img>Слева у нас есть четыре отдельных события столкновения, а справа - одно событие столкновения, поскольку мы создали
    &quot;родительский&quot; объект и назначили ему все вражеские объекты. Обратите внимание, что родительский объект не должен иметь никаких событий или кода в нем...</p>
  <p>Другим примером родительского поведения может быть игра, в которой вы хотите создать 10 различных по внешнему виду объектов и заставить их всех вести себя одинаково. Для этого вы создадите один родительский объект и в нем все ваши поведенческие действия или код
    в нужных событиях, а затем вы создадите десять объектов без действий или кода, но с разными <span class="notranslate">sprites</span>, и назначите им родительский объект. Теперь, когда вы поместите эти экземпляры в комнату, все они будут вести себя одинаково, но выглядеть по-разному,
    поскольку они &quot;наследуют&quot; события родительского объекта.</p>
  <p>Наконец, вы можете использовать воспитание, чтобы &quot;смешивать и сопоставлять&quot; события и поведение. Мы проиллюстрируем это на последнем примере... Допустим, вам нужны два монстра: один двигается вверх и вниз, а другой - влево и вправо.
    чтобы они имели одинаковое здоровье, стреляли в игрока и ранили игрока при столкновении с ними. В этом случае вы видите, что почти все события должны иметь одинаковые действия, за исключением одного или двух, которые управляют движением. Итак, опять же, мы можем сделать
    один объект родителем другого, но в этом случае мы также определяем определенные события для дочернего объекта. Эти события &quot;переопределяют&quot; родительские события, то есть всякий раз, когда событие для дочернего объекта содержит действия, они выполняются
    вместо действий, содержащихся в событии родителя. Если вы также хотите выполнить родительское событие, вы можете вызвать так называемое &quot;унаследованное&quot; событие с помощью функции <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>,
    или визуальное действие <span class="notranslate">GML</span> <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>.</p>
  <p><img>Слева вверху находится родительский объект с 5 событиями в нем, а справа вы видите &quot;дочерний&quot; объект. Дочерний объект
    также имеет 5 событий, но два из них переопределяют унаследованные от родителя события (события <strong>Step </strong>и <strong>Draw </strong>), а три других выделены серым цветом, так как они являются событиями, унаследованными от родителя. Унаследованные события
    также будут иметь значок &quot;переопределение родителя&quot; рядом с ними в редакторе событий:</p>
  <p><img>Когда вы нажимаете <img> на унаследованное событие,
    откроется редактор кода, в котором будет показан унаследованный родительский код, но вы не сможете редактировать этот код, так как его можно редактировать только в самом родительском объекте. Вы можете нажать правую кнопку мыши <img> на любом из родительских событий, чтобы открыть следующее меню опций:</p>
  <p><img>Здесь вы можете выбрать два варианта <strong>Открыть </strong>родительское событие, чтобы просмотреть код, или же вы можете выбрать <strong>Наследовать </strong>событие
    событие или <strong>переопределить </strong>событие. Если вы выберете <strong>Наследовать </strong>, то редактор кода откроется с функцией <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> уже
    (или действием <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>, если вы используете <span class="notranslate">GML</span> Visual). Любой последующий код, который вы поместите в это событие, теперь будет выполняться так же, как и код родительского объекта.
    имеет. Если вы выберете <strong>Переопределить </strong>событие, то окно кода также откроется, только теперь функция <span class="inline">event_inherited()</span> не будет вызываться, поэтому все, что вы добавите сюда, будет выполняться <em>вместо </em>кода
    в родительском объекте.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Из редактора кода вы можете быстро перейти к родительскому объекту, нажав правую кнопку мыши <img> и выбрав <strong>Go To Object</strong> из всплывающего меню, или (если событие было переопределено) вы можете выбрать <strong>Open Inherited Event</strong>, чтобы перейти непосредственно в редактор кода с кодом родительского события в нем.</p>
  <p>Когда в коде вы нацеливаетесь на родительский объект, код будет применяться и к &quot;детям&quot; родительского объекта. Это происходит, когда в действии вы указываете, что действие должно быть применено к экземплярам определенного объекта, а в коде это
    происходит, когда вы используете <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> оператор. Это будет работать и при вызове функций кода, таких как <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>,
    <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>, и т.д., где - если вы предоставите родительский объект - все экземпляры родительского <em>и </em>дочернего экземпляров
    будут включены в проверку. И наконец, родительские функции работают, когда вы ссылаетесь на переменные в других объектах, как в приведенном выше примере с монстром, если я установлю скорость врага 1 равной 10, то скорость врага 2 также будет равна десяти, поскольку он является дочерним объектом врага
    1.</p>
  <p>Обычно считается хорошей практикой в большинстве случаев создавать один базовый родительский объект, чтобы этот базовый объект содержал все поведение по умолчанию, но никогда не использовать его экземпляр в игре. Лучше использовать все дочерние объекты и использовать родительский объект только в ситуациях, подобных тем, что я описал выше.
    ситуациях, подобных тем, которые я описал выше, для столкновений, для ссылок на переменные и т.д... Вы также должны понимать, что у родителей тоже могут быть родители! Очевидно, что вы не можете создать цикл &quot;родитель 1 является ребенком родителя 2 является ребенком родителя
    1&quot;, но вы можете создать так называемую &quot;иерархию объектов&quot;, где &quot;<em>родитель 3 </em>является ребенком <em>родителя 2 </em>является ребенком <em>родителя 1</em>&quot;. Это чрезвычайно полезно для структурирования вашей игры, и вам настоятельно рекомендуется
    научиться использовать этот механизм.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Objects.htm">Редактор объектов</a></div>
        <div style="float:right">Следующее: <a href="Physics_Objects.htm">Физические объекты</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>