<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Воспроизведение аудио</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the Audio Playback async event." />
  <meta name="rh-index-keywords" content="Objects - Async Audio Playback Event" />
  <meta name="search-keywords" content="Audio Playback,ev_audio_playback" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Воспроизведение аудио</h1>
  <p><img>Это событие может быть вызвано только функциями воспроизведения <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/Audio_Buffers.htm">аудиоочереди</a> и возвращает <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">карту DS</a>, хранящуюся в переменной <a href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"> <span class="inline">async_load</span></a>,
    содержащую различные пары ключ/значение, относящиеся к аудиоочереди, которая вызвала событие. Событие запускается <a class="glossterm" data-glossterm="обратный звонок" href="#">обратным вызовом</a>, когда вы выбрали аудиоочередь для воспроизведения и
    буфер в этой аудиоочереди закончил воспроизведение.</p>
  <p>В карте DS будут доступны следующие клавиши:</p>
  <ul class="dropspotlist">
    <li class="dropspot">&quot;<span class="inline">queue_id</span>&quot; - индекс очереди, которая закончила воспроизведение, возвращаемый функцией <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm"><span class="inline">audio_create_play_queue()</span></a>.</li>
    <li class="dropspot">&quot;<span class="inline">buffer_id</span>&quot; - идентификатор буфера, из <a href="../../../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">которого</a> прекращено воспроизведение.</li>
    <li class="dropspot">&quot;<span class="inline">queue_shutdown</span>&quot; - устанавливается на 0 при обычном воспроизведении и на 1, когда событие получено, потому что <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_play_queue.htm"><span class="inline">audio_free_play_queue()</span></a> был
      было вызвано. Когда это значение установлено в 1, вы не хотите ставить в очередь дальнейшие данные.</li>
  </ul>
  <p>Поскольку аудио очередь может быть создана из нескольких буферов, это событие может быть вызвано несколько раз для одной очереди по мере достижения конца каждой секции буферизованного аудио, отсюда и ключ &quot;buffer_id&quot;.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Переменная <span class="inline" style="font-size: 14px">async_load</span> действительна только в асинхронных событиях, поскольку карта DS, на которую она указывает, создается в начале события, а затем удаляется в конце, при этом данная переменная сбрасывается со значением -1.
    Однако все дальнейшие структуры данных, созданные в результате события, должны быть очищены с помощью соответствующих функций.</p>
  <p>В примере использования, приведенном ниже, мы создадим аудио очередь с 10 буферизованными аудио звуками, добавленными к ней, а затем воспроизведем очередь:</p>
  <p class="code">audio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono);<br/> for (var i = 0; i &lt; 10; i++;)<br/>    {<br/>    audio_queue_sound(audio_queue, audio_buffer[i], 0, buffer_get_size(audio_buffer[i]));<br/>    }<br/> audio_play_sound(audio_queue,
    0, true);</p>
  <p>Теперь каждый шаг игры при обнаружении записи будет вызывать асинхронное событие Audio Recording, в котором вы сможете работать с записанным входом примерно так:</p>
  <p class="code">var queue = async_load[? &quot;queue_id&quot;];<br/> var num = 0;<br/> if queue = audio_queue<br/>    {<br/>    for (var i = 0; i &lt; 10; i++;)<br/>       {<br/>       if async_load[? &quot;buffer_id&quot;] == audio_buffer[i]<br/>          {<br/>  buffer_seek(audio_buffer[i],
    buffer_seek_start, 0);<br/>          num = i;<br/>          }<br/>       }<br/>    if num == 9<br/>       {<br/>       audio_stop_sound(audio_queue);<br/>       audio_free_play_queue(audio_queue);<br/>       }<br/>  }
  </p>
  <p>Здесь мы проверяем ID очереди, и если это та очередь, которая нам нужна, мы проверяем ID буфера, чтобы узнать, какой буфер закончил воспроизведение. Мы также устанавливаем локальную переменную в значение индекса для последующей проверки и возвращаем буфер в начало для этого звука.
    звука. Как только наша локальная переменная достигнет значения 9, что указывает на завершение очереди, мы остановим воспроизведение звука и освободим очередь.</p>
  <p> </p>
  <div class="droptext" data-targetname="drop-down"> </div>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Async_Events.htm">Асинхронные события</a></div>
        <div style="float:right">Следующий: <a href="Audio_Recording.htm">Аудиозапись</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Asynchronous Audio Playback Event
ev_audio_playback
Audio Playback
-->
  <!-- TAGS
ev_audio_playback
-->

</body></html>