<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>События объекта</title>
    <meta name="generator" content="Adobe RoboHelp 2020" />
    <meta name="rh-authors" content="Mark Alexander" />
    <meta name="topic-comment" content="Page detailing the events system and the different events in an object" />
    <meta name="rh-index-keywords" content="Objects - Events" />
    <meta name="search-keywords" content="events,object events,events list" />
    <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
    <script src="../../assets/scripts/main_script.js"></script>
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">-->
    <h1>События объекта</h1>
    <p>Итак, что такое <strong>события</strong> объекта? По сути, это незаметные моменты в игровом цикле, в которые происходят события, основанные на том, что вы для них запрограммировали. <span data-keyref="GameMaker Name">GameMaker</span> работает с циклами этих событий - с момента запуска комнаты до момента ее завершения происходит игровой цикл, в котором на каждом <strong>шаге </strong>запускается или проверяется серия событий, и вы можете разместить в своих объектах код или <span class="notranslate">GML</span> визуальные действия, которые реагируют на эти события (шаг - это момент игрового времени, регулируемый настройками скорости комнаты, и может также называться <strong>кадром</strong>).</p>
    <p>Давайте рассмотрим типичную настройку объекта с событиями и кодом:</p>
    <p><img>Как вы видите, в нашем примере объекта перечислено несколько событий, на которые он должен реагировать, но изначально при создании объекта этот список пуст, и вы должны решить, какие события вам нужны и что должны делать экземпляры этого объекта при наступлении этих событий. Чтобы добавить события в объект, нажмите кнопку <em>Add Event</em>, расположенную в нижней части списка событий, что приведет к появлению следующего окна:</p>
    <p><img>Это список всех основных событий и категорий событий, на которые может реагировать объект, и внутри каждой категории есть подсобытия для дальнейшего уточнения поведения. Например, если вы нажмете на категорию событий<strong>Key Press</strong> <img>, появится дополнительное окно с событиями, позволяющими выбрать, на <em>какую </em>клавишу должен реагировать объект.</p>
    <p>После того как вы выбрали событие, окно редактора события будет приковано к нему и откроется справа.</p>
    <div data-conref="../../assets/snippets/Visual_Code_Choice.hts"> </div>
    <p>Теперь вы можете редактировать код (или блоки) <span class="notranslate">GML</span>, чтобы придать вашему объекту определенное поведение или реакцию на данное событие.</p>
    <p>Вы можете нажать правую кнопку мыши <img> на любом событии, которое было добавлено к объекту, чтобы получить следующие опции меню:</p>
    <p><img>Этими вариантами являются:</p>
    <ul class="colour">
      <li><strong>Добавить событие</strong> - добавление нового события из списка событий.</li>
      <li><strong>Вырезать / </strong> <strong>Копировать / </strong> <strong>Вставить события</strong> - Вырезать, скопировать или вставить выбранное событие. Можно также использовать стандартные сочетания клавиш: <img> / <img> + <span class="inline">X</span>, <img> / <img> + <span class="inline">C</span>, и <img> / <img> + <span class="inline">V</span>.</li>
      <li><strong>Дублировать событие</strong> - дублирование выбранного события. При этом содержимое выбранного события будет продублировано в другом событии, которое вы укажете.</li>
      <li><strong>Изменить событие</strong> - изменить событие. В этом случае вам будет предложено выбрать другую категорию события, и после выбора содержимое текущего события будет изменено на новое событие (при этом исходное событие будет удалено).</li>
      <li><strong>Convert To <span class="notranslate">GML</span> Visual / Code</strong> - События объектов будут создаваться методом, выбранным при создании проекта, либо с помощью кода, либо с помощью действий <span class="notranslate">GML</span> Visual. С помощью этой опции вы можете конвертировать из одного в другой, независимо от типа проекта.</li>
      <li><strong>Удалить событие</strong> - удалить событие (или события).</li>
    </ul>
    <p>При удалении событий можно использовать <img> + <img>, чтобы выбрать несколько событий и затем удалить их все вместе. Каждый создаваемый объект имеет свой собственный список событий, которые добавляются в него из <strong>редактора объектов</strong>. Эти события делятся на две категории:</p>
    <ul class="colour">
      <li>те, которые выполняют каждый шаг игры</li>
      <li>те, которые &quot;запускаются&quot; игровым событием, например, достижением экземпляром края комнаты или нажатием кнопки клавиатуры или мыши.</li>
    </ul>
    <p>Полный список мероприятий приведен ниже:</p>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Создать</a></p>
    <div class="droptext" data-targetname="drop-down8">
      <p class="dropspot">Это событие происходит при первом создании экземпляра объекта, и это самое первое, что происходит в экземпляре, помещенном в комнату через редактор комнат при входе в комнату. Это означает, что данное событие является идеальным местом для инициализации <a class="glossterm" data-glossterm="переменная" href="#">переменных</a>, запуска <a href="../Timelines.htm">временной шкалы</a>, установки <a href="../Paths.htm">путей</a> и т.д... и всего остального, что обычно нужно сделать только один раз или только при первом создании экземпляра в комнате. Если ваш объект имеет какие-либо <strong>переменные объекта</strong> или <strong>переменные экземпляра</strong>, добавленные в редакторе объектов или редакторе комнаты, то эти переменные будут сначала инициализированы, а затем будет запущено <strong>событие Create Event</strong>.</p>
      <p class="dropspot">Помните, что вы можете изменить все, что вы установили в событии Create Event из <a href="../Room_Properties/Layer_Properties.htm">кода создания экземпляра</a> в редакторе комнат, поскольку он запускается непосредственно после события создания экземпляра и может быть использован для создания <strong>переменных экземпляра</strong> или для переопределения любых переменных, добавленных в качестве переменных объекта или в фактическом событии Create Event.</p>
      <div data-conref="../../assets/snippets/Instance_creation_order_warning.hts"> </div>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Уничтожить</a></p>
    <div class="droptext" data-targetname="drop-down9">
      <p class="dropspot">Это событие - событие, которое будет выполняться при уничтожении экземпляра. Его часто упускают из виду при добавлении поведения к объектам, но оно может быть очень полезным, например, для создания эффектов взрыва или частиц при убийстве врага, или для повторного рождения нового экземпляра объекта в другой части комнаты, или даже для добавления очков к счету.</p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">Уборка</a></p>
    <div class="droptext" data-targetname="drop-down10">
      <p class="dropspot"><span>Это событие будет вызываться после любого события, которое удаляет экземпляр объекта из комнаты. Таким образом, оно будет вызвано, если:</span></p>
      <ul class="dropspotlist">
        <li class="dropspot"><span>экземпляр уничтожается</span></li>
        <li class="dropspot"><span>комната заканчивается</span></li>
        <li class="dropspot"><span>игра заканчивается</span></li>
      </ul>
      <p class="dropspot"><span>Он предназначен для &quot;очистки&quot; любых динамических ресурсов, которые могут быть в вашей игре (например, поверхностей, структур данных и т.д.) или для выполнения любой задачи, которую нужно выполнить <em>один раз </em>, когда экземпляр удаляется из игры любым способом.</span></p>
      <p class="dropspot"><span>Обратите внимание, что это событие будет вызвано <em>сразу </em>после события, которое его вызвало, но экземпляр не будет фактически удален из игры <strong>до окончания текущего события</strong>. Например, если вы вызовете <span class="inline">instance_destroy()</span> в событии Step Event, то будет вызвано событие Destroy Event, затем событие Clean Up Event, а затем <em>завершится выполнение остальных событий Step Event</em>. Это означает, что любой ваш код после вызова <span class="inline">instance_destroy()</span> все равно будет запущен и станет потенциальной причиной ошибок, если вы очистили структуру данных или другой ресурс, который требуется коду, поэтому при использовании этого события следует соблюдать осторожность.</span> </p>
      <p> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Сигнализация</a></p>
    <div class="droptext" data-targetname="drop-down11">
      <p class="dropspot">Категория тревог разбита на 12 событий, по одному для каждого из возможных тревог, которые могут быть установлены в экземпляре. Итак, когда вы нажимаете на категорию <em>Добавить сигнал тревоги </em>, перед вами появляется следующее окно:</p>
      <p class="dropspot"><img>Здесь вы выбираете сигнал тревоги, который хотите создать, и, как только это будет сделано, вы увидите, что он был добавлен в окно событий, что позволяет добавлять к нему код, как обычно. Но что такое сигнал тревоги? Это специальное событие, которое ничего не делает, если только сигнал тревоги не был установлен ранее, и тогда оно будет ждать, пока сигнал не дойдет до 0, прежде чем выполнять действия или код, которые вы в него добавили.</p>
      <p class="dropspot">Как только сигнал достигнет 0 и выполнит код, он начнет обратный отсчет до -1, где и останется до тех пор, пока не будет установлен снова (то есть вы можете проверить значение сигнала тревоги, чтобы узнать, больше ли оно -1, что покажет вам, запущен он или нет). Так, если вы установите <span class="inline">alarm[0]</span> в событии создания объекта на 30, это будет означать, что <span data-keyref="GameMaker Name">GameMaker</span> отсчитает 30 игровых шагов, прежде чем запустить действия или код, помещенные в событие <span class="inline">alarm[0]</span>. Обратите внимание, что установка сигнала тревоги на 0 <em>не </em>приведет к запуску кода сигнала тревоги, поскольку событие срабатывает, но сигнал тревоги сразу же устанавливается на -1, поэтому код пропускается. Если вам нужно, чтобы сигнал тревоги выполнял следующий шаг, то следует установить значение 1.</p>
      <p class="dropspot">Это может быть очень полезно, поскольку позволяет приводить вещи в движение в точные моменты, и вы даже можете заставить их повторяться, поскольку ничто не мешает вам установить сигнал тревоги в собственном событии. Представьте, что у вас есть монстр, и вы хотите, чтобы он поворачивался направо каждые три секунды... тогда в событии создания монстра вы установите сигнал тревоги на скорость комнаты * 3 (если скорость комнаты равна 30, то это 30 шагов в секунду, умножьте это на 3 и получите 3 секунды! Таким образом, вы можете создать простые игровые циклы, в которых события происходят только через определенные промежутки времени.</p>
      <p class="dropspot">Стоит отметить, что сигнал тревоги без каких-либо действий или кода в нем <em>не </em>будет отсчитывать время. Однако даже при наличии только комментария и отсутствии кода или действий сигнал тревоги будет продолжать отсчет времени, и его можно будет установить и проверить, как обычно.</p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Шаг</a></p>
    <div class="droptext" data-targetname="drop-down12">
      <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> делит время на <strong>шаги </strong>, а скорость комнаты определяет, сколько таких шагов должно быть в секунду (шаг также можно назвать <strong>кадром</strong>). Один шаг, по сути, является циклом, который постоянно выполняется со всеми событиями, которые проверяются и запускаются по мере необходимости, пока игра работает, поэтому, как вы можете себе представить, <strong>событие Step Event </strong>- это событие, которое проверяется на каждом шаге игры, пока существует экземпляр.</p>
      <p class="dropspot">Мероприятие "Шаг" фактически состоит из трех подмероприятий, которые описаны ниже:</p>
      <p class="dropspot"><img>Для большинства вещей вполне достаточно стандартного события шага, но иногда вы хотите иметь немного больше контроля над тем, какой код выполняется и в какое время, поэтому для этого предусмотрены события шага <strong>Begin </strong>и <strong>End </strong>. Все три события проверяются на каждом шаге, но их порядок никогда не изменится, даже если будущие обновления движка <span data-keyref="GameMaker Name">GameMaker</span> изменят другие события, что означает, что это единственный надежный способ убедиться, что что-то всегда происходит раньше, чем что-то другое.</p>
      <p class="dropspot">Для чего может использоваться событие шага? Ну, его можно использовать для действий или кода, который должен выполняться непрерывно. Например, если один объект должен следовать за другим, здесь вы можете адаптировать направление движения к объекту, за которым мы следуем, чтобы он плавно двигался позади. Однако будьте осторожны с этим событием и не помещайте много сложных действий в событие step объектов, особенно если вы планируете иметь много экземпляров объекта в вашей игровой комнате, так как это может замедлить игру. Многие вещи можно поместить в сигналы тревоги или настроить их срабатывание с помощью некоторых из <strong>Других </strong>событий, вместо того чтобы делать это постоянно.</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">Столкновение</a></p>
    <div class="droptext" data-targetname="drop-down13">
      <p class="dropspot">Очевидно, что при создании игры очень важно знать, когда два (или более) экземпляра объекта столкнулись, и для этого у нас есть <strong>событие столкновения</strong>. Это событие, которое вы помещаете в объект и затем указываете, какой другой объект вы должны проверить на столкновения.</p>
      <p class="dropspot">Если у вас не включена физика, эти столкновения будут рассчитываться на основе маски двух объектов (маска определяется в свойствах <span class="notranslate">sprite</span> или может быть назначена независимо в свойствах объекта) и того, перекрываются они или нет. Обратите внимание, что если одному или другому объекту в столкновении не назначена маска (или маска <span class="notranslate">sprite</span> не задана), <em>даже если он что-то рисует</em>, столкновения не будут обнаружены.</p>
      <p class="dropspot">Если у вас включена <strong>физика </strong>, то столкновение будет основано на типе <strong>формы столкновения</strong><em>(Fixture</em>), которую вы определили для объекта в свойствах физики, как и его реакция на столкновение. Это означает, что вам не потребуется никакого кода для обработки столкновения, но это событие все равно <em>должно содержать хотя бы комментарий </em>, чтобы столкновения были обнаружены.</p>
      <p class="dropspot">Наконец, следует отметить, что все столкновения будут рассчитываться один раз за шаг игры перед запуском события столкновения, так что когда событие столкновения будет запущено, все столкновения уже будут рассчитаны и предварительно назначены. Это означает, что если вы создадите экземпляр в этом событии и затем попытаетесь проверить столкновение с ним, столкновение не будет обнаружено или разрешено до следующей <a class="glossterm" data-glossterm="итерация" href="#">итерации</a> цикла игры.</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">Клавиатура,</a>  <img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">Клавиатурная пресса,</a>  <img> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">Отпускание клавиатуры</a></p>
    <div class="droptext" data-targetname="drop-down14">
      <p class="dropspot">Предоставление игроку возможности управлять различными аспектами вашей игры очень важно, и для этого <span data-keyref="GameMaker Name">GameMaker</span> предоставляет вам очень полный список событий клавиатуры, которые можно использовать в любой из трех основных категорий клавиатуры. Для категории "Общая клавиатура" они срабатывают непрерывно каждый шаг, пока выбранная клавиша нажата, в то время как события категории "Нажатие и отпускание" срабатывают только один раз, когда клавиша изначально нажата или отпущена.</p>
      <p class="dropspot">Следует отметить, что события клавиатуры на самом деле запускаются во всех активных экземплярах в комнате, когда используется клавиша, но реагируют только те, у которых определено событие для этой конкретной клавиши. Вы можете создать несколько событий клавиатуры в любом объекте, и экземпляры этого объекта будут реагировать на все из них во время игры.</p>
      <p class="dropspot">Когда вы добавляете любое событие клавиатуры к объекту, вам будет представлено меню подсобытий клавиатуры, где вы можете указать клавишу, которая будет проверяться:</p>
      <p class="dropspot"><img>Большинство из них достаточно очевидны, но давайте вкратце пройдемся по разделам: вверху находятся клавиши со стрелками, за ними следуют наиболее используемые клавиши-модификаторы, затем остальная клавиатура (разделенная на дополнительные подразделы, чтобы вы могли получить точную необходимую клавишу, например <img> или <img>) и, наконец, два особых подсобытия, <strong>No Key</strong> и <strong>Any Key</strong>. Как следует из их названий, это подсобытия, которые проверяют, когда <em>ни одна </em>клавиша <em>не </em>нажата или когда нажата <em>любая </em>клавиша. Обратите внимание, что клавиши цифровой клавиатуры вызывают соответствующие события только в том случае, если включена <strong>блокировка цифр </strong>.</p>
      <p class="dropspot">События <strong>Press </strong>и <strong>Release </strong>для клавиатуры почти полностью совпадают с обычными событиями клавиатуры, за исключением того, что вместо непрерывного срабатывания они срабатывают только один раз. Когда клавиатура впервые регистрирует, что клавиша была нажата, она генерирует событие <strong>Keyboard Pressed</strong> (а также обычное событие Keyboard), а в первый раз после этого, когда клавиша больше не определяется как нажатая, она генерирует одно событие <strong>Keyboard Release</strong>.</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#">Мышь</a></p>
    <div class="droptext" data-targetname="drop-down16">
      <p class="dropspot">Категория "Мышь" разделена на ряд событий, которые можно выбрать, чтобы дать вам возможность более точно контролировать происходящее в вашей игре. Здесь вы можете увидеть, что именно представляют собой эти события:</p>
      <p class="dropspot"><img>События левой <img>, правой <img> и средней <img> кнопок (будь то <strong>обычные</strong>, <strong>нажатые </strong>или <strong>отпущенные</strong>) действуют на маску экземпляра, у которого произошло событие. Это означает, что <span data-keyref="GameMaker Name">GameMaker</span> будет проверять положение мыши в комнате при использовании этих кнопок на соответствие маскам столкновений экземпляров, у которых есть событие мыши. Если произойдет &quot;столкновение&quot; с <a class="glossterm" data-glossterm="ограничительная рамка" href="#">ограничительной рам</a> кой экземпляра, то сработает событие, поэтому убедитесь, что у экземпляра с этими событиями есть <span class="notranslate">sprite</span> с действительной маской столкновения или что у объекта выбрана маска <span class="notranslate">sprite</span> в свойствах объекта. Как следует из их названий, эти события срабатывают либо один раз, когда выбранная кнопка мыши впервые нажата или отпущена, либо непрерывно на каждом шаге, пока кнопка удерживается. </p>
      <p class="dropspot">События входа и выхода мыши также похожи на события кнопок, поскольку они тоже зависят от маски объекта, но на этот раз они срабатывают, когда мышь впервые &quot;входит&quot; (касается) объекта или когда мышь &quot;выходит&quot; (перестает касаться) объекта. Однако эти события не являются непрерывными, они срабатывают только один раз при каждом входе или выходе мыши из объекта, поэтому они идеально подходят для создания, например, кнопок, которые должны меняться при наведении на них мыши, а затем возвращаться в нормальное состояние при удалении мыши.</p>
      <p class="dropspot">Наконец, у нас есть еще один раздел событий мыши, который называется " <strong>Глобальная мышь</strong>". В этом подменю вы найдете выбор событий, которые предназначены для записи событий мыши в экземплярах, даже если мышь не находится над ними или даже рядом с ними. Это события, которые генерируются для <em>всех </em>экземпляров, и если для указанного события определены действия или код, то они будут выполнены, независимо от положения мыши в игровой комнате.</p>
      <p class="dropspot">Обратите внимание, что на мобильных устройствах или устройствах с сенсорным экраном левая кнопка мыши <img> может также использоваться для проверки наличия касания пальцем сенсорного экрана, а правая кнопка мыши <img> срабатывает при двойном касании экрана (это поведение можно изменить с помощью кода).</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down18" href="#">Жесты</a></p>
    <div class="droptext" data-targetname="drop-down18">
      <p class="dropspot">Это событие срабатывает, когда пользователь прикасается к экрану (на мобильных устройствах) или нажимает и перемещает мышь (на всех остальных платформах). Эти события похожи на события мыши, так как у вас есть обычные версии и <em>глобальные</em> версии. Обычные версии этих событий срабатывают только тогда, когда касания происходят на экземпляре, имеющем <span class="notranslate">sprite</span> (или маску), и касания происходят в пределах его <a class="glossterm" data-glossterm="ограничительная рамка" href="#">ограничительной области</a>. Глобальные версии этих событий будут срабатывать, если пользователь коснется <em>любого места </em>на экране.</p>
      <p class="dropspot">События, связанные с жестами, обнаруживают следующее:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><img> <strong>касания - </strong> когда пользователь нажимает/касается и быстро отпускает кнопку</li>
        <li class="dropspot"><img> <strong>перетаскивание - </strong> когда пользователь касается/нажимает и удерживает его, затем перемещает свой палец/курсор</li>
        <li class="dropspot"><img> <strong>щелчки - </strong> когда пользователь перемещает и отпускает касание/щелчок одним движением</li>
        <li class="dropspot"><img> <strong>щипки - </strong> когда пользователь держит два пальца на экране, а затем сдвигает их вместе/врозь</li>
        <li class="dropspot"><img> <strong>вращает - </strong> когда пользователь держит два пальца на экране, а затем поворачивает их вокруг точки</li>
      </ul>
      <p class="dropspot"><img>Различные события всегда содержат карту DS Map под названием &quot;<span class="inline">event_data</span>&quot;, которая содержит несколько пар ключ/значение с данными о положении и перемещении касания/щелчка. Для получения полной информации обо всех доступных подсобытиях и о том, как они работают, см. следующий раздел:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Gesture_Events.htm">Событие жеста</a></li>
      </ul>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down19" href="#">Другое</a></p>
    <div class="droptext" data-targetname="drop-down19">
      <p class="dropspot">Существует ряд специальных событий для использования при создании игр с помощью <span data-keyref="GameMaker Name">GameMaker</span>, которые в основном сгруппированы под событием Other и могут быть выбраны из всплывающего меню подсобытий, которое появляется при выборе этого события. Вот изображение всех этих событий:</p>
      <p class="dropspot"><img>Более подробную информацию о каждом из событий, перечисленных на изображении выше, можно найти в следующем разделе:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Other_Events.htm">Другие события</a></li>
      </ul>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down20" href="#">Нарисовать</a></p>
    <div class="droptext" data-targetname="drop-down20">
      <p class="dropspot">Эта категория событий управляет тем, что вы видите на экране, когда запускаете свою игру, и делится на различные отдельные события:</p>
      <p class="dropspot"><img>Как вы можете видеть, категория событий рисования имеет несколько различных типов событий. <strong>Draw Begin</strong>, <strong>Draw </strong>и <strong>Draw End</strong> - это &quot;стандартные&quot; события рисования, которые вы, вероятно, будете использовать чаще всего. По умолчанию главное событие Draw всегда вызывается для каждого экземпляра, независимо от того, есть ли у него <span class="notranslate">sprite</span> или нет, хотя если вы пометите экземпляр как невидимый, это событие не будет вызвано (поэтому имейте это в виду, если у вас есть какая-либо игровая логика в событии рисования невидимого объекта, так как она не будет запущена). Главное событие рисования также является местом, где <span data-keyref="GameMaker Name">GameMaker</span> по умолчанию рисует экземпляр <span class="notranslate">sprite</span>, когда в событии нет ни кода, ни действий (т.е. вы не добавили его в список событий для объекта). При рисовании по умолчанию используется <span class="notranslate">sprite</span>, связанный с экземпляром, и он будет рисоваться с любыми преобразованиями, установленными в коде или примененными действиями.</p>
      <p class="dropspot">Стандартные события рисования рисуют <em>до </em>событий <strong>Draw GUI </strong>и <em>между </em>событиями <strong>Pre Draw </strong>и <strong>Post Draw </strong>, что означает, что все, что рисуется в этом событии, рисуется под событием <strong>Draw GUI </strong>, независимо от слоя (т.е. все, что рисуется в событии Draw GUI, всегда будет рисоваться поверх всего, что рисуется в обычном событии рисования, независимо от порядка слоев).</p>
      <p class="dropspot">Обратите внимание, что выше приведен просто обзор того, как работают события рисования, но для получения полной информации обо всех доступных под-событиях, пожалуйста, обратитесь к следующему разделу:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Draw_Events.htm">Событие розыгрыша</a></li>
      </ul>
      <p> </p>
      <p> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down21" href="#">Асинхронный</a></p>
    <div class="droptext" data-targetname="drop-down21">
      <p class="dropspot">Эта категория событий особенна тем, что содержащиеся в ней события по умолчанию запускаются не <span data-keyref="GameMaker Name">GameMaker</span>'ом, а по завершении какого-либо другого действия, например, загрузки файла или ответа от веб-сервера. Категория делится на следующие события:</p>
      <p class="dropspot"><img alt="Object Editor Events View" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Events.png"/></p>
      <p class="dropspot">Допустим, вы хотите добавить файл изображения в <span data-keyref="GameMaker Name">GameMaker</span>. Вы можете записать это в другом событии (возможно, в событии Create) объекта, а затем заставить этот объект нарисовать полосу загрузки в ожидании (например), опрашивая соответствующее асинхронное событие до <a class="glossterm" data-glossterm="обратный звонок" href="#">обратного вызова</a>, который сообщит <span data-keyref="GameMaker Name">GameMaker</span>, что файл загружен. Затем вы можете использовать данные, возвращаемые в этом событии, для выполнения других действий, например, смены комнаты или покупки предмета.</p>
      <p class="dropspot">Обратите внимание, что выше приведен просто обзор того, как работает асинхронное событие, но для получения полной информации обо всех доступных под-событиях, пожалуйста, обратитесь к следующему разделу:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Async_Events.htm">Список асинхронных событий</a></li>
      </ul>
      <p class="dropspot"> </p>
    </div>
    <p> </p>
    <p>Следует также отметить, что событиям можно присваивать имена или, по крайней мере, давать им короткий описательный текст, который будет отображаться рядом с ними в редакторе событий. Для этого просто добавьте следующее в самую первую строку редактора кода события (при использовании <span data-keyref="GML_Code">GML Code</span>):</p>
    <p class="code">/// @description Your text here</p>
    <p>Таким образом, вы можете иметь что-то подобное, например, в событии <strong>Alarm </strong>:</p>
    <p class="code">/// @description This is the AI Fight alarm</p>
    <p>И теперь в редакторе событий вы увидите следующее:</p>
    <p><img alt="Object Editor Events List" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_EventList.png"/></p>
    <p>Для пользователей <span data-keyref="GML_Visual">GML Visual</span> добавление комментария требует использования действия <strong>Execute Code</strong>, которое должно быть размещено в самом верху действий для события, перед всеми остальными. Когда вы добавляете это действие, вы даете ему ту же строку кода, которая показана выше, чтобы назвать событие, например:</p>
    <p><img>Дополнительную информацию о некоторых из перечисленных событий и общий порядок проведения мероприятий см. в следующих разделах:</p>
    <ul class="colour">
      <li><a href="Event_Order.htm">Порядок проведения мероприятий</a></li>
      <li><a href="Other_Events.htm">Другие события</a></li>
      <li><a href="Draw_Events.htm">События розыгрыша</a></li>
      <li><a href="Async_Events.htm">Асинхронные события</a></li>
      <li><a href="Gesture_Events.htm">События, связанные с жестами</a></li>
    </ul>
    <p> </p>
    <p> </p>
    <p> </p>
    <div class="footer">
      <div class="buttons">
        <div class="clear">
          <div style="float:left">Назад: <a href="../Objects.htm">Редактор объектов</a></div>
          <div style="float:right">Следующий: Родительские объекты</div>
        </div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
    </div>
    <!-- KEYWORDS
Object Events
Named Events
--><!-- TAGS
object_events
--></body>
</html>