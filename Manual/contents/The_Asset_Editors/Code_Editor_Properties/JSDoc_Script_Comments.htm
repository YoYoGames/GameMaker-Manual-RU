<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Комментарии к сценариям JSDoc</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how JSDoc Script Comments work" />
  <meta name="rh-index-keywords" content="Code Editor - JSDoc Comments,JSDoc" />
  <meta name="search-keywords" content="JSDoc,JSDoc Comments" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Комментарии к сценариям JSDoc</h1>
  <p>Если вы хотите, чтобы ваши пользовательские функции имели функцию завершения кода и отображали необходимые аргументы определенным образом в редакторе кода, то вам необходимо добавить некоторые комментарии в <a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">стиле JSDoc</a>. Эти комментарии используются для того, чтобы указать функции автозаполнения, как функция должна использоваться и заполняться в <a href="../Scripts.htm">редакторе сценариев</a>.</p>
  <p>Формат типичного заголовка функции должен содержать имя функции, описание функции, а затем список различных аргументов (параметров), которые принимает функция, обязательно начиная каждую строку с тройного обратного слэша &quot;<span class="inline">///</span>&quot;, так как это указывает <span data-keyref="GameMaker Name">GameMaker</span> на то, что комментарий следует воспринимать в стиле JSDoc. В качестве альтернативы вы можете обернуть свои JSDoc-комментарии в <span class="inline">/**</span>... <span class="inline">*/</span>, при этом <span class="inline">/**</span> должен располагаться на отдельной строке.</p>
  <p>Самим комментариям необходимо присвоить идентификатор (перед которым ставится &quot;<span class="inline">@</span>&quot;) и содержание, а доступные идентификаторы приведены ниже:</p>
  <table>
    <colgroup>
      <col style="width: 306px;" />
      <col style="width: 488px;" />
      <col style="width: 487px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>Идентификатор</th>
        <th>Содержание</th>
        <th>Синтаксис</th>
      </tr>
      <tr>
        <td><span class="inline">@function</span> / <span class="inline">@func</span></td>
        <td>Полное имя функции, включая аргументы</td>
        <td><span class="inline">@func my_func(args)</span></td>
      </tr>
      <tr>
        <td><span class="inline">@description</span> / <span class="inline">@desc</span></td>
        <td>Общее описание того, что делает функция</td>
        <td><span class="inline">@desc &lt;Description goes&gt;</span></td>
      </tr>
      <tr>
        <td><span class="inline">@param</span> / <span class="inline">@</span><span class="inline">parameter</span> / <span class="inline">@arg</span> / <span class="inline">@argument</span></td>
        <td>Информация об аргументах, с необязательным <a href="Feather_Data_Types.htm"><span class="notranslate">type</span></a></td>
        <td><span class="inline">@param <em>{type}</em> name &lt;Parameter description&gt;</span></td>
      </tr>
      <tr>
        <td><span class="inline">@return / @returns</span></td>
        <td><a href="Feather_Data_Types.htm">Тип</a> данных, которые возвращает функция</td>
        <td><span class="inline">@return {type} &lt;Return description&gt;</span></td>
      </tr>
      <tr>
        <th colspan="3">Только<a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">перо</a> </th>
      </tr>
      <tr>
        <td><span class="inline">@pure</span></td>
        <td>Помечает функцию как <a class="glossterm" data-glossterm="чистый" href="#">чистую</a></td>
        <td><span class="inline">@pure</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@ignore</span></td>
        <td style="">Скрывает функцию из автозаполнения Feather</td>
        <td><span class="inline">@ignore</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@deprecated</span></td>
        <td style="">Помечает функцию как устаревшую</td>
        <td><span class="inline">@deprecated</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@context / @self</span></td>
        <td style="">Задает контекст для функции, который автозаполнение Feather использует для предоставления контекстной информации. Может быть объектом или конструктором.</td>
        <td><span class="inline">@self &lt;object&gt;</span></td>
      </tr>
    </tbody>
  </table>
  <p>Если вы не указали тип для ваших аргументов или возвращаемого значения, и вы используете <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>, он будет предполагать тип данных для них автоматически, основываясь на теле вашей функции.</p>
  <p>См. информацию о типах данных для <span class="inline">@param</span> и <span class="inline">@return</span> в разделе <a href="Feather_Data_Types.htm">Типы данных Feather</a>.</p>
  <h2>Примеры</h2>
  <p>Чтобы получить представление о том, как это будет работать при написании собственных функций, давайте рассмотрим базовый пример:</p>
  <p class="code">function is_same_object(_id, _obj)<br />
    {<br />
        if (_id.object_index == _obj)<br />
        {<br />
            return true;<br />
        }<br />
        else return false;<br />
    }</p>
  <p>Все, что делает этот сценарий, это проверяет, имеет ли экземпляр тот же <span class="inline">object_index</span>, что и данный объект, и вызывается просто как:</p>
  <p class="code">if is_same_object(id, obj_Player)<br />
    {<br />
        instance_destroy()<br />
    }</p>
  <p>Однако, если записать это в редактор кода, вы увидите имена переменных аргументов напрямую (<span class="inline">_id</span> и <span class="inline">_obj</span>), что в большинстве случаев не очень описательно. Вы можете использовать JSDoc для определения собственных имен и описаний аргументов, а также информации для функции:</p>
  <p class="code">/// @function                is_same_object(inst_id, object_id)<br />
    /// @description             Check if the given instance belongs to the given object.<br />
    /// @param {Id.Instance}     inst_id    The unique instance ID value of the instance to check.<br />
    /// @param {Asset.GMObject}  object_id  The object index to be checked against.<br />
    /// @return {Bool}<br />
    <br />
    function is_same_object(_inst_id, _object_id)<br />
    {<br />
        return _inst_id.object_index == _object_id;<br />
    }
  </p>
  <p>Теперь при вызове этой функции в любом месте вашего проекта вы увидите новые имена аргументов, которые были введены в комментарии JSDoc:</p>
  <p><img>На изображении выше верхняя часть показывает функцию в автозаполнении, а нижняя - как работает помощник аргумента внизу. Обратите внимание, что как необязательная часть &quot;тип&quot;, так и обязательная часть &quot;описание&quot; <span class="inline">@param</span> по умолчанию не отображаются в коде <span class="notranslate">IDE</span>, и чтобы увидеть их, необходимо активировать опции в <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/GML_Code_Preferences.htm">Предпочтениях GML</a>.</p>
  <p>При использовании <a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a> вы увидите подробную информацию о функции при наведении на нее курсора мыши:</p>
  <p><img>Вы можете заключить имя аргумента в скобки <span class="inline">[]</span>, чтобы указать, что он является необязательным. Тогда редактор кода будет ожидать любое количество аргументов между минимально необходимым и общим количеством аргументов.</p>
  <p>Например, см. следующую функцию:</p>
  <p class="code">/// @function    animate_position(end_x, end_y, start_x, start_y)<br />
    /// @desc        Animates the instance to ending point, from optional starting point<br />
    /// @arg end_x<br />
    /// @arg end_y<br />
    /// @arg [start_x]<br />
    /// @arg [start_y]<br />
    <br />
    function animate_position (x1, y1, x2, y2)<br />
    {<br />
        // Function code<br />
    }
  </p>
  <p>Аргументы <span class="inline">start_x</span> и <span class="inline">start_y</span> помечены как необязательные, что означает, что редактор кода теперь будет ожидать от 2 до 4 аргументов, как видно из предупреждающего сообщения:</p>
  <p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672" /></p>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Вы получите такое же поведение, если будете использовать необязательные аргументы в объявлении функции. Дополнительные сведения см. в разделе <a href="../../GameMaker_Language/GML_Overview/Script_Functions.htm">Функции сценария</a>.</p>
  <p>Поскольку скрипты могут содержать несколько функций, вы можете добавить комментарии JSDoc для каждой из них перед ее объявлением:</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/JSDoc_Feather_Info.png" /></p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Scripts.htm">Редактор сценариев</a></div>
        <div style="float:right">Следующее: <a data-xref="{title}" href="Feather_Data_Types.htm">Типы данных пера</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
JSDoc Script Comments
-->
  <!-- TAGS
jsdoc_comments
-->
</body>
</html>