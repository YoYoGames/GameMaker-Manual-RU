<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Функции сценария в сравнении с методами</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Функции сценария в сравнении с методами</h1>
  <p>На этой странице представлена важная информация об использовании функций сценария в сравнении с методами.</p>
  <h2>Основное различие</h2>
  <p> <a href="Script_Functions.htm">Функция сценария</a> создается с помощью этого синтаксиса:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p> <a href="Method_Variables.htm">Переменная метода</a> создается с помощью этого синтаксиса:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Первый синтаксис следует использовать в скриптах для создания глобальных функций, которые можно вызывать из любой области видимости в вашей игре.</p>
  <p>Второй синтаксис следует использовать при создании функций в <a href="Structs.htm">структурах/конструкторах</a> и объектах. Этот синтаксис создает переменную, содержащую метод.</p>
  <h2>Прямые звонки</h2>
  <p>Вы можете вызывать функции и методы сценария напрямую, используя круглые скобки <span class="inline2">()</span>, как и <a href="Runtime_Functions.htm">функции времени выполнения</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>Вы также можете использовать функцию <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> для запуска функции сценария, хотя сейчас это устаревшая функция и не рекомендуется к использованию.</p>
  <h2>Косвенные вызовы: Методы</h2>
  <p>Вы можете хранить ссылку на метод в другой переменной, чтобы позже вызвать его через эту переменную:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Посмотрите, как в коде не ставится <span class="inline2">()</span> после <span class="inline2">reset_alpha</span>. Это потому, что мы читаем ссылку на метод, а не вызываем его.</p>
  <p>В этом примере вызов <span class="inline2">temp_1</span> вызовет <span class="inline2">reset_alpha</span>, так как в нем хранится ссылка на этот <strong>метод</strong>.</p>
  <p>Вы можете передавать ссылку на метод таким образом. Однако при использовании функций сценария есть оговорка.</p>
  <h2>Косвенные вызовы: Функции сценария</h2>
  <p>Вы также можете хранить ссылку на функцию сценария в другой переменной:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Теперь вы можете вызвать <span class="inline2">temp_1</span>, сделав следующее:</p>
  <p class="code">temp_1();</p>
  <p>Однако, поскольку эта переменная ссылается на <strong>функцию скрипта</strong>, сначала нужно преобразовать ее в <strong>метод</strong>, а затем вызвать его.</p>
  <p>Это может легко привести к увеличению использования памяти, особенно если вы вызываете его каждый кадр, потому что движок теперь должен создавать новый метод каждый кадр для этого вызова. </p>
  <p>Итак, каково же решение?</p>
  <ul class="colour">
    <li>Используйте <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> для вызова функции сценария через ее ссылку, что не приведет к созданию метода.</li>
    <li>Или, лучшее решение: преобразовать функцию скрипта <a href="../GML_Reference/Variable_Functions/method.htm">в метод</a> при передаче ссылки на нее.</li>
  </ul>
  <p>Чтобы реализовать второе решение, ваш код будет выглядеть следующим образом:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Это создание нового метода из функции сценария <span class="inline2">reset_x</span>, используя <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Вызов <span class="inline2">temp_1()</span> теперь с использованием круглых скобок не увеличит использование памяти, так как метод уже создан для вас.</p>
  <p>Опять же, это применимо только в том случае, если вы вызываете функцию скрипта <strong>косвенно</strong>, через ссылку, хранящуюся в переменной. Вызов функции напрямую не вызывает таких проблем.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Назад: <a data-xref="{title}" href="GML_Overview.htm">Обзор кода GML</a></div>
        <div>Следующее: <a data-xref="{title}" href="Functions/Static_Variables.htm">Статические переменные</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>