<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Выражения и операторы</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different GML expressions" />
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Выражения и операторы</h1>
  <h2>Выражения</h2>
  <p>Выражение - это математическая фраза, которая может содержать обычные числа, переменные, строки или функции, а также один или несколько <strong>операторов </strong>(таких как сложение, вычитание, умножение и т.д...). Значения, используемые в выражении, могут быть вещественными числами (например, <span class="inline">3.4 * 6</span>), шестнадцатеричными числами, начинающимися со знака <span class="inline">$</span> (например, <span class="inline">$00FFAA | $88FFAA</span>), строками между двойными кавычками (например, <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span>) или более сложными выражениями, использующими несколько операторов и значений.</p>
  <h2>Операторы</h2>
  <p>Для использования в выражениях предусмотрены следующие операторы:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Присвоение (=)</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span> используется для присвоения значения переменной. Обратите внимание, что этот оператор <i>также</i> может использоваться для сравнения переменных в <span data-keyref="GameMaker Name">GameMaker</span>, и вы можете видеть это в примерах и кодах других пользователей. Однако это наследие старых версий <i>GameMaker</i>, и для сравнения следует использовать операторы <b>==</b>, а для присвоения - <b>=</b>, как показано в этих примерах:</p>
    <p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Комбинирование (&amp;&amp;, ||, ^^)</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, <span class="inline2">||</span>, <span class="inline2">^^</span> (<span class="inline2">and</span>, <span class="inline2">or</span> и <span class="inline2">xor</span></b> ) используются для объединения булевых значений, чтобы получить либо true, либо false. Если любой из следующих примеров разрешается в <span class="inline">true</span>, то код будет запущен:</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Nullish (??, ??=)</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> &quot;Nullish&quot; означает просто значение, равное <span class="inline2">undefined</span> или <span class="inline2">pointer_null</span>.</p>
    <p class="dropspot"><span class="inline2">??</span> - это оператор коалесценции nullish, который возвращает заданное выражение, если заданное значение <span class="inline2">не определено</span> или <span class="inline2">указатель_null</span>. Этот оператор имеет следующий синтаксис:</p>
    <p class="code_plain">(input ?? null_output)</p>
    <p class="dropspot">Если <span class="inline2">входное</span> значение <span class="inline2">не определено</span> или <span class="inline2">указатель_null</span>, выражение вернет значение <span class="inline2">null_output</span>; однако во всех остальных случаях оно просто вернет <span class="inline2">входное</span> значение. Это может быть использовано для определения значения &quot;по умолчанию&quot; для переменной в случае, если сама переменная не имеет допустимого значения.</p>
    <p class="dropspot">Рассмотрим следующий пример:</p>
    <p class="code_plain">имя пользователя = data.username ?? &quot;INVALID USERNAME&quot;;</p>
    <p class="dropspot">Здесь переменная <span class="inline2">username</span> получит значение, хранящееся в <span class="inline2">data.username</span>, однако если <span class="inline2">data.username</span> окажется <span class="inline2">неопределенным</span> или <span class="inline2">указателем_null</span>, то вместо него переменная получит строку <span class="inline2">&quot;INVALID USERNAME&quot;</span>. Этот пример гарантирует, что любые вызовы функций, использующих переменную <span class="inline2">username</span>, не приведут к ошибке из-за того, что ей было присвоено значение nullish, и что пользователь будет знать, когда его имя пользователя не было возвращено.</p>
    <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Выражение в правой части оператора коалесценции nullish выполняется только тогда, когда входное значение равно nullish, что означает, что любые вызовы функций, включенные в выражение RHS, будут выполняться только в том случае, если входное значение равно nullish.</p>
    <hr />
    <p class="dropspot"><span class="inline2">??=</span> похож на описанный выше оператор nullish coalescing, но используется специально для присвоения переменных. Этот оператор имеет следующий синтаксис:</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">Если <span class="inline2">переменная</span> <span class="inline2">не определена</span> или <span class="inline2">указатель_null</span>, ей будет присвоено значение <span class="inline2">null_value</span>; в противном случае переменная останется неизменной. Это можно использовать для присвоения пользовательского значения &quot;по умолчанию&quot; переменной, когда она содержит нулевое значение.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Сравнение (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b> являются сравнениями и могут давать только результат <span class="inline">true</span> или <span class="inline">false</span> (где true можно также интерпретировать как 1, а false как 0). Примеры использования:</p>
    <p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Побитовые (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, <span class="inline2">^</span>, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span> </b>используются для выполнения побитовых операций, где | = побитовое или, &amp; = побитовое и, ^ = побитовое xor, &lt;&lt; = сдвиг влево, &gt;&gt; = сдвиг вправо. Примеры использования:</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">Дополнительную информацию о том, как использовать побитовые операторы и что они делают, можно найти в разделе: <a href="../../Additional_Information/Bitwise_Operators.htm">Побитовые операторы</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Арифметические (+, -, *, /)</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> - это сложение, вычитание, умножение и деление соответственно. Примеры использования:</p>
    <p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p>
    <p class="note"><span class="note"><b>ПРИМЕЧАНИЕ</b></span> Числа с плавающей запятой не останавливаются на делении на ноль, так как в качестве ответа они получат бесконечность. Если A и B - целые числа (либо int32, либо int64), то деление будет выполнено как целое число (и деление на 0 будет проверено и выдаст ошибку. В противном случае оно будет выполнено как деление с плавающей запятой (без проверки деления на 0).</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Увеличение/уменьшение (++, --)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> используются для прибавления или вычитания единицы<span class="inline2">(1</span>) из значения. Стоит отметить, что размещение этого символа до или после значения, к которому нужно прибавить или из которого нужно вычесть, приводит к несколько иным результатам. Например:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> увеличит переменную и вернет увеличенное значение.</li>
      <li class="dropspot"><span class="inline">a++</span> увеличит переменную, но вернет значение, которое было до ее увеличения.</li>
    </ul>
    <p class="dropspot">Поэтому, если у вас есть что-то подобное:</p>
    <p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p>
    <p class="dropspot">Отладочный вывод будет иметь значения 1 и 3. Вот несколько примеров использования:</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p>
    <p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p>
    <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: На целевых платформах <span class="notranslate">YoYo</span> Compiler (отмеченных (YYC)) эти выражения оцениваются слева направо, в то время как на всех других целевых платформах они оцениваются справа налево, что означает, что это:</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">даст разные результаты в зависимости от платформы.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Деление и модуль (div, %, mod)</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span>, <span class="inline2">mod</span> (<span class="inline2">%</span></strong> ) - это деление и модуляция, где div дает сумму, на которую можно разделить значение, получая только целочисленный коэффициент, а mod дает только остаток от деления. Обратите внимание, что div или mod можно использовать только с целыми значениями. Примеры использования: </p>
    <p class="code">secs = time mod 60;<br />
      time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Унарные (!, -, ~)</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">Предусмотрены следующие <strong>унарные</strong> операторы:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: булево &quot;не&quot;, поэтому <span class="inline">!true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>: отрицает следующее вещественное или целочисленное значение (не действует для строк или булевых чисел)</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>: отрицает следующее значение побитово</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <h2>Группировка выражений</h2>
  <p><i></i>В качестве значений во всех выражениях можно использовать числа, переменные или функции, возвращающие значение, а подвыражения можно заключать в скобки. Все операторы работают для значений вещественных чисел, но <em>сравнение </em>также работает для строк, а оператор &quot;<strong>+</strong>&quot; можно использовать для объединения строк.</p>
  <p>При выполнении нескольких операций в одном выражении <b>очень важно</b> использовать скобки <span class="inline">()</span> для разделения порядка операций, так как разные платформы могут выполнять их по-разному, если это не указано явно. Например, рассмотрим следующий код:</p>
  <p class="code">a = b == c || d;</p>
  <p>Различные целевые компиляторы будут выполнять операции в разном порядке, поскольку они не показаны явно, что приведет к &quot;странным&quot; результатам, которые вы можете не ожидать, играя в свою игру. чтобы избежать этого, используйте <span class="inline">()</span> для разделения частей, например, так:</p>
  <p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p>
  <h2>Группировка заявлений</h2>
  <p>При использовании различных операций и выражений в одном блоке кода их тоже следует разделять. Например, следующий код <em>выглядит</em> как правильный:</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>Однако компилятор может интерпретировать это одним из двух способов:</p>
  <p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>Теперь, глядя на код, можно сказать, что один из них немного глуповат, но это потому, что мы знаем, чего хотим добиться и что должно произойти, а компилятор - нет. Он видит только две переменные с оператором ++ между ними, и ему приходится выбирать, к какой из них его применить. Поэтому <strong>всегда</strong> следует <strong>явно заключать в скобки выражения, операции и утверждения</strong>. Правильная версия приведенного выше кода должна быть следующей:</p>
  <p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p>
  <p>Это может показаться более многословным, но нет никакой двусмысленности в отношении выполняемых операций, и это будет компилироваться и вести себя последовательно на всех платформах. Также обратите внимание, что хотя в настоящее время вы можете строить цепочки выражений и утверждений без использования скобок, это унаследованная функция, и в будущем она может быть устаревшей и удалена из <span class="notranslate">GML</span>, поэтому использование скобок сейчас позволит &quot;защитить&quot; ваш код от будущего (и в любом случае является хорошей практикой).</p>
  <p>Вот несколько последних примеров различных выражений:</p>
  <p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p>
  <p>И последнее, что следует отметить, - это то, что для использования с определенными <a href="../GML_Reference/Data_Structures/Data_Structures.htm">структурами данных</a> и <a href="Arrays.htm">массивами</a> существуют &quot;короткие пути&quot; выражения, называемые <b>аксессорами</b>. Они позволяют быстро и легко добавлять или заменять данные в этих форматах без использования каких-либо вызовов функций. Более подробную информацию можно найти на следующей странице</p>
  <ul class="colour">
    <li><a href="Accessors.htm">Аксессоры</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="GML_Overview.htm">Обзор GML</a></div>
        <div style="float:right">Следующий: <a data-xref="{title}" href="Script_Functions.htm">Функции и переменные сценария</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>