<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Константы</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the different GML constants" />
  <meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="constants,macros,enums,macro,enum" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Константы</h1>
  <p>Константа - это тип переменной, которая устанавливается один раз в начале игры и затем никогда не изменяется. На самом деле, значения констант <em>нельзя изменить после того, как они были объявлены</em>. Это делает их идеальными для хранения значений, которые используются на протяжении всей игры для идентификации специальных данных.</p>
  <p>На сайте <span class="notranslate">GameMaker Language</span> существует два типа пользовательских констант: <strong>макросы</strong> и <strong>перечисления</strong>, оба из которых описаны ниже. Также обратите внимание, что любое значение, которое всегда одинаково, классифицируется как константа, независимо от <a href="../Data_Types.htm">типа данных</a>, например, строка или число 3.</p>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> На сайте <span class="notranslate">GameMaker Language</span> также имеется ряд встроенных постоянных значений, которые используются для идентификации конкретных вещей. Они описаны на соответствующих страницах для функций времени выполнения, которым они требуются, в разделе <a href="../../GML_Reference/GML_Reference.htm">GML Reference</a>.</p>
  <h2>Макросы</h2>
  <p>Хотя макросы не совсем переменные, они похожи на них по способу использования, т.е. это именованные значения, которые вы можете использовать в коде для замены <a class="glossterm" data-glossterm="с жестким кодом" href="#">жестко закодированных</a> значений. По сути, макрос - это именованная переменная, содержащая выражение. Вы можете определить свои собственные макросы с помощью <a href="../Script_Functions.htm">редактора сценариев</a> и затем использовать их в коде и действиях, как обычные переменные, с той лишь разницей, что они <i>не могут быть изменены в игре</i>.</p>
  <p>Синтаксическая структура макроса выглядит следующим образом:</p>
  <p class="code">#macro <i>&lt;variable&gt;</i> <i>&lt;expression&gt;</i></p>
  <p>Например, определите следующий макрос &quot;<span class="inline">total_weapons</span>&quot;:</p>
  <p class="code">#macro total_weapons 10</p>
  <p class="note_heading">Синтаксис макроса...</p>
  <p class="note">Для определения макросов необходимо правильно использовать приведенный выше синтаксис. Вы не можете использовать знак равенства (как в переменных) или ставить точку с запятой в конце (как в обычном операторе). Это приведет к тому, что определение макроса станет недействительным.<br>
    <br>
    Например, это неправильный способ определения макроса:<br>
    <br>
   <span class="inline2">#macro total_weapons = 10;</span><br>
    <br>
    Если убрать знак равенства и двоеточие, это будет правильное определение макроса.
  </p>
  <p>Затем вы можете использовать это в своем коде следующим образом:</p>
  <p class="code">pos++;<br />
    <br />
    if (pos &gt;= total_weapons)<br />
    {<br />
        pos = 0;<br />
    }
  </p>
  <p>Обратите внимание, что вы не сможете изменить значение константы, поэтому подобный код приведет к аварийному завершению игры:</p>
  <p class="code">total_weapons = 11;</p>
  <p>Вы можете определить макрос в любом месте вашего кода или в сценарии, и он будет <i>предварительно скомпилирован</i> и включен в вашу игру, как если бы он был там с самого начала, но мы рекомендуем вам создать специальный актив сценария и определить все ваши макросы в нем. Это будет проще организовать и отладить в дальнейшем!</p>
  <p>Если вам нужно, чтобы значение макроса изменялось во время выполнения, то, вероятно, вам следует сделать его <a href="Global_Variables.htm">глобальной переменной</a>, так как они могут быть изменены из кода во время игры, если только вы не установите макрос как<span> <a href="../Runtime_Functions.htm">время выполнения </a></span> <a href="../Runtime_Functions.htm"><span class="notranslate">function</span></a>. Установка макроса в функцию означает, что эта функция будет вызываться каждый раз, когда вы используете макрос. Например:</p>
  <p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p>
  <p>Затем вы вызовете этот макрос следующим образом:</p>
  <p class="code">image_blend = col;</p>
  <p>При использовании этого кода изображение будет окрашиваться в разные цвета каждый раз, когда используется макрос. Стоит отметить, что макросы можно также разделить на несколько строк с помощью символа <span class="inline"><span class="inline">\</span>, чтобы показать место разрыва строки. В качестве примера можно привести следующее:</p>
  <p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br />
    string(player_name) + \<br />
    &quot;, how are you today?&quot;);</p>
  <p>Это чисто косметическое действие, так как разделение макроса таким образом никак не повлияет на результат конечного макроса при его использовании, и просто обеспечивает поддержку многострочного текста в макросах, содержащих более длинные строки кода.</p>
  <p>Очень важной особенностью макросов является то, что они могут быть определены для использования с определенными <a href="../../../Settings/Configurations.htm">конфигурациями</a> (конфигами), то есть вы можете иметь одно и то же имя макроса, но давать ему разные значения в зависимости от выбранного в данный момент конфига. Например, если у вас есть конфигурация для <span class="notranslate">Android</span> Ads и другая для <span class="notranslate">iOS</span> Ads, то вы можете определить один макрос для хранения требуемого значения ID приложения:</p>
  <p class="code">#macro ad_id &quot;&quot;;<br />
    #macro Android:ad_id &quot;com.yoyogames.googlegame&quot;<br />
    #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p>
  <p>Как видно, сначала указывается имя конфигурации, затем двоеточие <span class="inline">:</span>, а затем имя и значение макроса. Обратите внимание, что между двоеточием <span class="inline">:</span> и именем конфигурации или именем макроса не должно быть пробелов, иначе вы получите ошибку.</p>
  <h2 id="enumhead">Enums</h2>
  <p>Перечисление - это &quot;перечислитель&quot;, и оно, по сути, позволяет вам создать свой собственный ограниченный тип данных со списком постоянных значений, и они имеют следующую структуру:</p>
  <p class="code">enum <i>&lt;variable&gt;</i><br />
    {<br />
    <i>    &lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br />
    <i>    &lt;constant&gt;</i> [= <i>&lt;value&gt;</i>],<br />
        // etc...<br />
    }
  </p>
  <p>В следующем примере мы создаем перечисление для цветов радуги и присваиваем ему различные константы и значения по умолчанию:</p>
  <p class="code">enum rainbowcolours<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }</p>
  <p>Элементы перечисления могут быть только <b>целыми числами</b> или <b><a class="glossterm" data-glossterm="выражение" href="#">выражениями</a></b> с предыдущими перечислениями, которые оцениваются в целое число, и по умолчанию нумеруются от 0 и выше, поэтому в нашем примере, приведенном выше, по умолчанию будут <span class="inline">red = 0</span>, <span class="inline">orange = 1</span>, <span class="inline">yellow = 2</span> и т.д..</p>
  <p>Вы также можете присвоить значения переменным enum во время создания:</p>
  <p class="code">enum enum_test<br />
    {<br />
        val = 10;<br />
    }<br />
    <br />
    enum rainbowcolours<br />
    {<br />
        red = 5,<br />
        orange = 5 * 2,<br />
        yellow = 15,<br />
        green = 20,<br />
        blue = 25,<br />
        indigo = 30,<br />
        violet = 35 * enum_test.val<br />
    }
  </p>
  <p>Обратите внимание, что в приведенном выше примере мы используем другое перечисление для создания выражения для &quot;violet&quot;. Это работает, только если перечисление, на которое ссылаются, было создано <i>до</i> перечисления, которое используется в выражении, но это не будет работать для переменных или функций, поскольку значение перечисления должно быть способно оцениваться как константа при <a class="glossterm" data-glossterm="Компиляция" href="#">компиляции</a> проекта. Также обратите внимание, что все значения перечисления оцениваются в <b>целые числа</b>, и когда вы создаете свои собственные, вы должны знать, что для работы перечислений <i>допускаются только целые значения</i>. Это значение может быть любым целым числом, которое может быть представлено числом с плавающей точкой двойной точности, включая отрицательные значения.</p>
  <p>Для последующего доступа к значению внутри данного типа перечисления можно использовать метод point <span class="inline">&quot;.&quot;</span>, как показано ниже:</p>
  <p class="code">variable = &lt;enum_name&gt;.&lt;<em>enum_variable</em>&gt;;</p>
  <p>В качестве примера давайте воспользуемся перечислением &quot;<span class="inline">rainbowcolours</span>&quot;, которое мы создали в приведенном выше коде:</p>
  <p class="code">colour_value = rainbowcolours.green * rainbowcolours.red;</p>
  <p>Теперь переменная <span class="inline">colour_value</span> будет содержать значение 100 (20 * 5).</p>
  <p>Обратите внимание, что вы <em>не можете </em>изменять значения для любой константы перечисления после ее создания, точно так же, как вы не можете изменять макросы после их создания.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Значения Enum хранятся как <span class="notranslate">int64s</span>, поэтому выполнение <span class="inline"><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real()</a></span> для них вернет <span class="inline">false</span>.</p>
  <p> </p>
  <h2>Встроенные константы</h2>
  <p>В следующей таблице приведен список встроенных констант, которые могут быть возвращены некоторыми функциями и операциями в ваших проектах:</p>
  <table>
    <tbody>
      <tr>
        <th>Постоянная</th>
        <th>Описание</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_null</span></td>
        <td>Эта константа указывает на то, что указатель не указывает ни на что значимое (то же самое, что<span> </span><span class="inline">NULL</span> <span> </span> в C++ или <span class="inline">null</span> в C#).<br>
          Это значение является <a class="glossterm" data-glossterm="falsy" href="../Data_Types.htm#">ложным</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
        <td>Эта константа просто означает, что значение не является действительным указателем</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">undefined</span></td>
        <td>Эта константа возвращается, когда функция должна <em>что-то</em> вернуть, но не имеет подходящего или &quot;правильного&quot; значения для возврата.<br>
          Это значение является <a class="glossterm" data-glossterm="falsy" href="../Data_Types.htm#">ложным</a>.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">NaN</span></td>
        <td><span>Это константа, которая может быть возвращена, когда компилятор не может оценить результаты операции как число - например, 0 / 0 не может быть определено как действительное число, и поэтому представляется как </span><span class="inline">NaN</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">infinity</span></td>
        <td><span class="inline"><span data-highlight-container="true"><span data-highlight="true">
                <font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">This constant </span>
              <span>относится к числу, которое считается бесконечным, например, результат, который вы получите при делении любого значения с плавающей запятой на ноль, например: 1.0/0.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">true</span></td>
        <td>Эта константа представляет значение 1, которое <span data-keyref="GameMaker Name">GameMaker</span> будет оценивать как булево значение &quot;true&quot; (обратите внимание, что любое значение, равное или большее 1, будет оцениваться как <span class="inline">true</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">false</span></td>
        <td>Эта константа представляет значение 0, которое <span data-keyref="GameMaker Name">GameMaker</span> будет оценивать как булево значение &quot;false&quot; (обратите внимание, что любое значение меньше или равно 0 будет оцениваться как <span class="inline">false</span>).</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">pi</span></td>
        <td>Эта константа представляет собой значение числа Пи: 3,141592653589793280 и т.д... хотя точное значение будет зависеть от различных факторов, таких как ОС или целевая платформа.</td>
      </tr>
    </tbody>
  </table>
  <p>Информацию о сравнении равенств для некоторых из перечисленных выше констант см. в <a data-xref="{text}" href="../../../Additional_Information/Type_Tables.htm#h">Таблице равенств</a>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Variables_And_Variable_Scope.htm">Переменные и область применения переменных</a></div>
        <div style="float:right">Следующее: <a href="Local_Variables.htm">Локальные переменные</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->
</body>
</html>