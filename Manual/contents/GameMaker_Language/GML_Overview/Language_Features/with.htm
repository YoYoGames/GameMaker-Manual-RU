<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>с</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with function" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>с</h1>
  <p>Как указано в разделе <a href="../Addressing_Variables_In_Other_Instances.htm">Обращение к переменным в других экземплярах</a>, можно читать и изменять значение переменных в экземплярах и <a href="../Structs.htm">структурах</a>, отличных от того, в котором в данный момент выполняется любой данный код. Однако в ряде случаев вы хотите сделать гораздо больше, чем просто изменить одну переменную в этих других экземплярах, и можете захотеть выполнить более сложные действия, требующие нескольких функций и строк кода. Например, представьте, что вы хотите переместить все экземпляры объекта ball в вашей игре на 8 пикселей вниз. Вы можете подумать, что это достигается простым выполнением следующего фрагмента кода:</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>Но это неверно, поскольку правая часть присваивания получает значение координаты y первого шарика и прибавляет к нему 8. Затем это новое значение устанавливается как координата y <em>всех </em>шариков, в результате все шарики получают одинаковую координату y, и даже если вы используете следующее:</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>будет иметь точно такой же эффект, потому что это просто сокращение первого утверждения. Как <i>же</i> добиться чего-то подобного? Вот почему утверждение <span class="inline">with</span> существует в <span class="notranslate">GML</span>. Утверждение <span class="inline">with</span> имеет следующий синтаксис:</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Для <a class="glossterm" data-glossterm="выражение" href="#">выражения</a> можно указать один или несколько экземпляров (или struct) для выполнения кода, используя ID экземпляра, ID объекта (который указывает, что <i>все экземпляры</i> в комнате этого объекта должны выполнить блок кода), ID struct или одно из специальных <a href="../Instance_Keywords.htm">ключевых слов</a> (<span class="inline">all</span> или <span class="inline">other</span>). В результате <strong>область видимости</strong> кода в фигурных скобках <span class="inline">{}</span> изменится с экземпляра, структуры или функции, в которой фактически находится код, на экземпляр (или экземпляры, или структуру), указанный в выражении.</p>
  <p>Как только выражение установит область видимости <span class="inline">with</span>, <a class="glossterm" data-glossterm="заявление" href="#">оператор</a> будет выполнен для каждого из указанных экземпляров, как если бы этот экземпляр был текущим ( <span class="inline">self</span>). Итак, возвращаясь к нашей исходной задаче, чтобы переместить все экземпляры объекта ball на 8 пикселей вниз, нужно ввести:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>По сути, это цикл, и на каждой <a class="glossterm" data-glossterm="итерация" href="#">итерации</a> цикла код будет выполняться на одном экземпляре объекта <span class="inline">obj_ball</span>.</p>
  <p>Если вы хотите выполнить несколько операторов, просто заключите их в фигурные скобки, как и любой другой блок кода. Например, чтобы переместить все шарики в нашем примере в случайное положение и придать им случайную скорость и направление, вы можете использовать:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>Как упоминалось выше, в операторе (операторах) указанный экземпляр или структура стал целевым (<span class="inline">self</span>) экземпляром, который выполняет блок кода, что означает, что исходный экземпляр (который содержит <span class="inline">with</span> и весь блок кода) стал экземпляром. <a href="../Instance_Keywords.htm"><span class="inline">other</span></a> экземпляром. Так, например, чтобы переместить все шарики в позицию текущего экземпляра, который фактически содержит код, вы можете напечатать следующее:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p>Заявление <span class="inline">with</span> является чрезвычайно мощным инструментом и может быть полезно во многих и многих обстоятельствах, поэтому важно, чтобы вы полностью понимали, как его можно использовать. В помощь вам ниже приведено несколько примеров его использования:</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>Приведенный выше код создаст экземпляр <span class="inline">obj_Ball</span> и присвоит ему скорость и направление движения экземпляра, который выполняет весь блок кода.</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>Приведенный выше код уничтожит экземпляр <span class="inline">obj_Ball</span>, ближайший к экземпляру, выполняющему код.</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>Приведенный выше код использует <span class="inline">with</span> для нацеливания на struct и установки переменных-членов struct в значения, хранящиеся в переменных экземпляра из экземпляра, вызывающего код.</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>Приведенный выше код немного сложнее предыдущих, поскольку в нем используется <a href="../Variables_And_Variable_Scope.htm">локальная переменная</a>. Эта переменная является <strong>локальной </strong>для <em>события</em> или<em>функции</em> <em>скрипта </em>, а не для экземпляра или структуры, и поэтому может использоваться и быть доступной для всех экземпляров, на которые есть ссылки в блоке кода. Так, в приведенном выше коде мы установили локальную переменную на специальное ключевое слово <span class="inline">noone</span>, а затем использовали конструкцию <span class="inline">with</span>, чтобы каждый экземпляр <span class="inline">obj_Ball</span> проверил свою переменную <span class="inline">str</span> на соответствие переменной экземпляра, выполняющего блок кода. Если значение переменной больше, то они сохраняют свой уникальный идентификатор в локальной переменной <span class="inline">inst</span>, что означает, что в конце кода в локальной переменной <span class="inline">_inst</span> будет сохранен только экземпляр со значением больше, чем у вызывающего экземпляра (или ключевого слова <span class="inline">noone</span>, если ни один из них не больше).</p>
  <p>Стоит отметить, что внутри вызова можно использовать специальные операторы <span class="inline"><a href="break.htm">break</a></span> и <span class="inline"><a href="continue.htm">continue</a></span>. <font face="Lucida Console"><span style="font-size: 16px;"><b>с</b></span></font> вызова. Использование <span class="inline">break</span> немедленно завершит блок кода <span class="inline">with</span> и перейдет к любому коду, который находится в событии или функции после того, как <span class="inline">with</span> должен был завершиться, например:</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>Приведенный выше код перебирает все экземпляры объекта <span class="inline">obj_Enemy</span> в комнате и устанавливает переменную <span class="inline">hp</span> в значение 100 для первых 10 найденных экземпляров. Если найдено более 10 экземпляров, код с вызовет <span class="inline">break</span> и завершится.</p>
  <p>Примером использования <span class="inline">continue</span> в цикле <span class="inline">with</span> может быть:</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p>Этот код перебирает все экземпляры с родителем <span class="inline">obj_Enemy_Parent</span>, затем проверяет каждый экземпляр на то, является ли переменная экземпляра <span class="inline">invulnerable</span> переменной <span class="inline">true</span> или нет. Если да, то ключевое слово <span class="inline">continue</span> завершает текущую итерацию цикла и переходит к следующему доступному экземпляру, иначе удаляет 25 из переменной <span class="inline">hp</span>. Так повторяется до тех пор, пока не будут проверены все экземпляры с этим родителем.</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Language_Features.htm">Особенности языка</a></div>
        <div style="float:right">Следующий: <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>