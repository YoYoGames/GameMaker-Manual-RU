<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>переключатель</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the switch function" />
  <meta name="rh-index-keywords" content="switch,case" />
  <meta name="search-keywords" content="switch,default" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>переключатель</h1>
  <p>В ряде ситуаций вы хотите, чтобы ваши экземпляры выполняли различные действия в зависимости от конкретного значения. Вы можете сделать это с помощью нескольких последовательных <a href="If_Else_and_Conditional_Operators.htm"><span class="inline">if / else</span></a> но когда количество возможных вариантов становится больше двух или трех, обычно проще использовать оператор <span class="inline">switch</span>.</p>
  <p>Заявление <span class="inline">switch</span> имеет следующий синтаксис:</p>
  <p class="code">switch (&lt;expression&gt;)<br />
    {<br />
        case &lt;constant1&gt;:<br />
            &lt;code&gt;<br />
        break;<br />
    <br />
        case &lt;constant2&gt;:<br />
            &lt;code&gt;<br />
        break;<br />
        <br />
        // more cases (with breaks)<br />
    <br />
        default:<br />
            &lt;code&gt;;<br />
    }
  </p>
  <p>Это работает следующим образом:</p>
  <ul class="colour">
    <li>Сначала выполняется <a class="glossterm" data-glossterm="выражение" href="#">выражение</a>.</li>
    <li>Затем его результат сравнивается с различными константами после каждого из<span class="glossextra">утверждений</span> <span class="inline">case</span>. Когда мы говорим &quot;константа&quot;, мы имеем в виду, что значение в данном случае не может быть переменной выражения и должно быть фиксированным значением любого <a href="../Data_Types.htm">типа данных</a>, например, <span class="inline2">&quot;бой&quot;</span> или <span class="inline2">3</span>, или ключевое слово <span class="inline2"><span class="inline"><a href="../Instance_Keywords.htm">noone</a></span></span>. </li>
    <li>Выполнение начинается с первого оператора <span class="inline">case</span> с совпадающим значением, <i>пока не встретится оператор <a href="break.htm"><span class="notranslate">break</span></a> </i>.</li>
    <li>Если ни одно из утверждений <span class="inline">case</span> не имеет совпадающего значения, то будет выполнено утверждение <span class="inline">default</span>. Наличие оператора <span class="inline">default</span> не обязательно, и если он отсутствует, то при отсутствии совпадающих случаев никаких действий предприниматься не будет. Оператор <span class="inline">default</span> может быть размещен в любом месте блока switch, однако традиционно он располагается внизу, после всех случаев.</li>
  </ul>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Оператор switch будет продолжать выполнять код в пределах <span class="inline">case</span>, пока не встретится <span class="inline">break</span>. Если вы не используете <span class="inline">break</span>s в конце примеров, это приведет к тому, что переключатель &quot;перетечет&quot; на следующий <span class="inline">case</span>, и даже в секцию <span class="inline">default</span>, если на пути не будет <span class="inline">break</span>s. Это может привести к нежелательному поведению, так как выполнение одного <span class="inline">case</span> может привести к выполнению нескольких <span class="inline">case</span>, поэтому используйте <span class="inline">break</span> там, где это необходимо.</p>
  <p>Простой пример использования оператора switch будет выглядеть следующим образом:</p>
  <p class="code">switch (player_lives)<br />
    {<br />
        case 3:<br />
            draw_sprite(20, 20, spr_face_healthy);<br />
        break;<br />
    <br />
        case 2:<br />
            draw_sprite(20, 20, spr_face_hurt);<br />
        break;<br />
    <br />
        case 1:<br />
            draw_sprite(20, 20, spr_face_fatal);<br />
        break;<br />
    <br />
        default:<br />
            draw_sprite(20, 20, spr_face_fainted);<br />
        break;<br />
    }
  </p>
  <p>Обратите внимание, что для выполнения одного и того же оператора можно использовать несколько операторов <span class="inline">case</span>, так как оператор <span class="inline">break</span> не всегда требуется для каждого <span class="inline">case</span>. Если для конкретного <span class="inline">case</span> оператора <span class="inline">break</span> не существует, выполнение просто продолжается с кода для следующего случая, например:</p>
  <p class="code">switch (keyboard_key)<br />
    {<br />
        case vk_left:<br />
        case ord(&quot;A&quot;):<br />
            x -= 4;<br />
        break;<br />
    <br />
        case vk_right:<br />
        case ord(&quot;D&quot;):<br />
            x += 4;<br />
        break;<br />
    <br />
        case vk_up:<br />
        case ord(&quot;W&quot;):<br />
            y -= 4;<br />
        break;<br />
    <br />
        case vk_down:<br />
        case ord(&quot;S&quot;):<br />
            y += 4;<br />
        break;<br />
    }
  </p>
  <p>Приведенный выше код использует <span class="inline">switch</span> для проверки наличия события клавиатуры, а затем сравнивает его с каждым из перечисленных <span class="inline">case</span>. Если оно соответствует любому из требуемых значений, то выполняется соответствующий код. Обратите внимание, как <span class="inline">switch</span> может проверять несколько <span class="inline">cases</span> и выполнять код до следующего <span class="inline">break</span>, чтобы позволить использовать различные клавиши для получения одного и того же результата.</p>
  <p>Каждый <span class="inline">case</span> может иметь свой собственный код, так что вы можете создать своего рода систему &quot;наследования&quot;, где один случай выполняет свой собственный код, а затем и код для следующего случая.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Language_Features.htm">Особенности языка</a></div>
        <div style="float:right">Следующий: <a href="break.htm"><span class="notranslate">break</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
switch
-->
  <!-- TAGS
switch
-->
</body>
</html>