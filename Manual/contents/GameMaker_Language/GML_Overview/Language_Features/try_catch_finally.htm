<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p>Операторы <span class="inline">try</span>, <span class="inline">catch</span> и <span class="inline">finally</span> могут быть использованы в вашей игре для проверки ошибок и позволяют вам тестировать блоки кода и контролировать, что произойдет, если возникнут какие-либо <a href="../../../Additional_Information/Errors/Runner_Errors.htm">исключения во время выполнения</a>. Их использование предотвратит завершение игры и показ стандартного сообщения об ошибке пользователю, но это означает, что вам придется позаботиться о том, что произойдет дальше в этом случае, например, сохранить файлы журнала и завершить игру изящно (обратите внимание, что если вы ничего не сделаете, ваша игра может стать нестабильной и работать некорректно).</p>
  <p>В самом простом виде синтаксис <span class="inline">try</span> выглядит следующим образом:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Однако наличие <span class="inline">try</span> без чего-либо, что на самом деле обрабатывает любые исключения, которые может произвести код, будет не очень полезным, поэтому мы обычно используем его в паре с <span class="inline">catch</span>, используя следующий синтаксис:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Что делает <span class="inline">catch</span>, так это позволяет выполнить дополнительный код, представленный в следующем блоке, если было поймано исключение из предыдущего <span class="inline">try</span>. Если это исключение времени выполнения, то предоставленная переменная может быть использована для доступа к <a href="../Structs.htm">структуре</a>, которая будет содержать следующую информацию:</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>Простой пример использования показан ниже:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>Может случиться так, что вы захотите выполнить некоторый код независимо от того, было ли брошено исключение или нет, и для этого вы можете добавить блок <span class="inline">finally</span>. Синтаксис <span class="inline">finally</span> следующий:</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>Стоит отметить, что вы можете иметь любую комбинацию из них вместе, т.е:</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li>
  </ul>
  <p>Обратите внимание, что внутри блока <span class="inline">finally</span> вы <em>не можете </em>использовать <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> или <a href="return.htm"><span class="inline">return</span></a> поскольку они не имеют никакого значения в данном контексте, и компилятор выдаст ошибку, если они будут использованы.</p>
  <p>Наконец, вы также можете вложить различные <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> друг в друга, например:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>Стоит отметить, что вы можете заменить стандартное сообщение об ошибке <span class="notranslate">GML</span> и использовать свой собственный код обработчика, вызвав функцию <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. Эта <a href="../Runtime_Functions.htm">функция времени выполнения</a> позволяет вам предоставить пользовательскую функцию <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> который будет вызываться каждый раз, когда в вашей игре возникают необработанные исключения.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Language_Features.htm">Особенности языка</a></div>
        <div style="float:right">Следующий: <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>