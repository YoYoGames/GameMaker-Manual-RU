<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Структуры и конструкторы</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Структуры и конструкторы</h1>
  <p> <strong>Структура </strong>- это переменная, которая содержит коллекцию других переменных. Переменные, которые хранит struct, могут быть любого ранее упомянутого <a href="Data_Types.htm">типа данных</a>, и эти переменные можно читать и записывать после первоначального объявления struct, а также можно добавлять дополнительные переменные в struct после его объявления.</p>
  <p>Переменные, используемые в struct, должны соответствовать обычной схеме именования переменных, то есть: они не могут начинаться с цифры и должны состоять только из буквенно-цифровых символов и символа подчеркивания &quot;_&quot;, а также обратите внимание, что содержимое struct <em>не зависит от экземпляра или функции, которая его создала</em>, и поэтому вы можете - если хотите - использовать встроенные имена переменных, такие как <span class="inline">image_index</span> или <span class="inline">x</span> и <span class="inline">y</span>.</p>
  <p>После первоначального создания структуры не требуют никаких затрат на обработку, пока они существуют, хотя <i>и</i> занимают место в памяти. Синтаксис struct выглядит следующим образом:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>Так, примером этого на практике может быть:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>Приведенный выше код создает struct в переменной <span class="inline">mystruct</span> и заполняет ее некоторыми значениями (struct могут быть созданы в локальном, экземпляровом и глобальном масштабах, как и любая другая переменная - более подробную информацию см. в разделе " <a href="Variables_And_Variable_Scope.htm">Переменные и масштабы переменных</a> "). Обратите внимание, что вам не обязательно заполнять содержимое структуры при ее первоначальном создании, и вы можете создать пустую структуру, просто сделав это:</p>
  <p class="code">mystruct = {};</p>
  <p>Переменные могут быть добавлены в эту структуру позднее в коде игры. Для их последующего добавления используется оператор dot (так же, как в разделе " <a href="Addressing_Variables_In_Other_Instances.htm">Обращение к переменным в других экземплярах</a>"): </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>Это дает тот же результат, что и инициализация struct следующим образом: </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>Вот пример структуры с различными переменными и типами данных:</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>В приведенном выше коде вы заметите, что в структурах можно определять методы и использовать функции времени выполнения, а также использовать локальные переменные и переменные экземпляра в объявлении структуры.</p>
  <h3 id="inst_in_struct">Переменные экземпляра в объявлении структуры?</h3>
  <p>Например, в приведенном выше примере вы заметите, что переменная struct &quot;g&quot; устанавливается в значение <span class="inline">image_index</span>, которое является переменной экземпляра. Вы можете подумать, что в этом случае вам нужно использовать <a href="Instance_Keywords.htm">ключевое слово</a> <span class="inline">other</span>, чтобы получить переменную экземпляра, но это не обязательно. По сути, когда вы определяете struct<strong>, все переменные-члены, расположенные слева от двоеточия &quot;:&quot;, являются переменными <em>struct</em></strong>, а значения и переменные, расположенные справа, используют область видимости того, что определяет struct (в данном случае, экземпляра). </p>
  <p>Давайте рассмотрим простой пример, чтобы проиллюстрировать это. Допустим, вы хотите определить структуру с переменными &quot;x&quot; и &quot;y&quot; и установить их на &quot;x&quot; и &quot;y&quot; экземпляра, определяющего структуру. На практике код будет выглядеть следующим образом:</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>В приведенном выше коде переменные-члены struct <span class="inline">x</span> и <span class="inline">y</span> устанавливаются в значения, хранящиеся в переменных экземпляра <span class="inline">x</span> и <span class="inline">y</span>, поскольку правая часть двоеточия &quot;:&quot; относится к экземпляру, определяющему struct. Стоит отметить, что это означает, что вы <em>не можете</em> использовать переменные-члены struct для определения последующих переменных внутри объявления struct. Например, в следующем случае вы получите ошибку:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>Ошибка возникает потому, что переменные <span class="inline">a</span> и <span class="inline">b</span> на самом деле оцениваются в области видимости того, что определяет структуру (они находятся справа от двоеточия &quot;:&quot;), а <em>не</em> определяются в самой структуре.<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">ВАЖНО!</strong></em>  Вы <strong>не можете </strong>использовать какие-либо встроенные <em><strong>глобальный </strong></em>в качестве имен членов структуры, например: <span class="inline">game_id</span> или <span class="inline">fps</span>. Полный список этих глобальных переменных вы можете найти на следующей странице:</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">Структура Запрещенные переменные</a></li>
  </ul>
  <p>После того, как структура определена, вы можете получить доступ к данным в ней, используя нотацию &quot;точка&quot;, как показано ниже:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>Вы также можете выполнять операции над переменными внутри struct или использовать их в функциях, как и любые другие переменные. Например:</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Наконец, структуры могут иметь другие структуры, вложенные в них, например, так:</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>Для доступа к таким вложенным структурам по-прежнему используется точечная нотация, например, так:</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>Другим способом доступа к данным в структуре является использование функции <a href="Language_Features/with.htm"><span class="inline">with()</span></a> функцию. Так, например, вы можете сделать следующее:</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>Использование <span class="inline">with()</span> изменяет область видимости кода на данную структуру, где вы можете манипулировать переменными-членами в области видимости структуры. Обратите внимание, что в примере мы также используем <a href="Instance_Keywords.htm">ключевое слово<span class="inline">other</span> </a>. Это работает так же, как и в экземпляре при использовании <span class="inline">with()</span>, и будет ссылаться на экземпляр (или struct), который фактически выполняет блок кода.</p>
  <p>Когда структура больше не нужна, она может быть удалена из памяти с помощью оператора <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> оператор, который помечает, что структура может быть собрана. Это не является строго обязательным, поскольку <a class="glossterm" data-glossterm="сборщик мусора" href="#">сборщик мусора</a> может сделать это автоматически, если на struct больше не ссылаются в вашем коде, но это хорошая практика, и мы рекомендуем это делать (например, вызвать <span class="inline">delete</span> в <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">событии Clean Up</a> экземпляра, чтобы явно сообщить сборщику мусора, что struct в области видимости экземпляра должна быть удалена). Вот пример:</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">Функции конструктора</h2>
  <p>Вы также можете использовать <a href="Script_Functions.htm">функции</a> или <a href="Method_Variables.htm">методы</a> <a href="Script_Functions.htm">сценария</a> для создания функций, которые могут быть использованы для генерации новых структур, что требует использования ключевого слова <span class="inline">constructor</span> для функции и оператора <a href="Language_Features/new.htm"><span class="inline">new</span></a> при создании структуры из такой функции. См. следующую функцию:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Или, используя синтаксис переменной метода:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Здесь мы создаем функцию под названием <span class="inline">Vector2</span> и сообщаем <span data-keyref="GameMaker Name">GameMaker</span>, что это функция, используемая для создания структур, добавляя ключевое слово <span class="inline">constructor</span> после ее определения. Затем вы можете вызвать эту функцию-конструктор следующим образом:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>Переменная <span class="inline">v2</span> теперь будет содержать структуру с переменными <span class="inline">x</span> и <span class="inline">y</span> и <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a> <a href="Method_Variables.htm">переменная метода</a> <span class="inline">Add</span>.</p>
  <p>Вы также можете использовать необязательные аргументы в функциях конструктора:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>Теперь этот конструктор будет использовать <span class="inline">0</span> для аргументов <span class="inline">_x</span> и <span class="inline">_y</span>, если они не указаны при вызове функции. Это означает, что вы можете создать новую структуру <span class="inline">Vector2</span> без необходимости указывать какие-либо аргументы:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Наследование</h2>
  <p>Функции, созданные таким образом, также будут поддерживать одиночное <b>наследование</b>, то есть: вы можете создать функцию-конструктор, которая наследует данные от другой функции-конструктора.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: При работе с наследованием вы не можете использовать переменные метода для определения функции конструктора, только функции сценария.</p>
  <p>Например, выше мы создали функцию-конструктор <span class="inline">Vector2</span>, поэтому мы можем использовать ее в качестве &quot;родителя&quot; для другой функции-конструктора, которую мы назовем <span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>Как вы видите, при определении функции мы используем двоеточие &quot;<span class="inline">:</span>&quot;, чтобы отделить новый конструктор от родительского конструктора, от которого он наследуется. Дочерний конструктор (<span class="inline">Vector3</span>) передает аргументы <span class="inline">_x</span> и <span class="inline">_y</span> в родительский конструктор (<span class="inline">Vector2</span>), которые используются для запуска сначала родительского конструктора, после чего выполняется дочерний конструктор. Таким образом, дочерний конструктор получает родительские переменные (<span class="inline">x</span> и <span class="inline">y</span>), а также может определять свои собственные (<span class="inline">z</span>).</p>
  <p>Вы также можете передавать постоянные значения в родительский конструктор, чтобы определенный дочерний конструктор всегда предоставлял одни и те же значения своему родительскому конструктору:</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>Это означает, что урон базового меча всегда будет равен <span class="inline">10</span>, поскольку он передает это значение своему родительскому конструктору независимо от того, какими могут быть его собственные аргументы.</p>
  <p>Обратите внимание, что присвоение значения по умолчанию аргументу в дочернем конструкторе отменяет значение по умолчанию для этого аргумента в родительском. Смотрите следующий пример:</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Оба этих конструктора выведут <span class="inline">20</span> в выходной журнал, поскольку это было значение по умолчанию для аргумента, заданного дочерним конструктором, и это же значение было передано в родительский конструктор.</p>
  <p>Более подробную информацию об операторах <span class="inline">new</span> и <span class="inline">delete</span> см. на следующих страницах:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>Строковый вывод</h2>
  <p>И последнее, что следует упомянуть о структурах, это то, что вы можете изменить то, что выводится на консоль из них для отладки. По умолчанию вызов функции <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a> на struct выводит содержимое struct (как показано выше). Однако можно настроить это сообщение, добавив в struct специально названный метод <span class="inline">toString</span>:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This stuct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>Теперь, когда вызывается функция <span class="inline">show_debug_message()</span>, для генерации вывода будет использоваться метод <span class="inline">toString</span>, и - в приведенном выше примере - вы получите:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Обратите внимание, что вы также можете вызвать функцию <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a> для ссылки на struct и использовать ее для вывода содержимого - или метода <span class="inline">toString</span> - на экран, или сохранить его в файл, или что угодно, например:</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>Наконец, существует ряд функций времени выполнения, которые вы можете использовать для структур, чтобы получить переменные, которые они содержат, а также несколько других вещей. Вы можете найти их в следующем разделе:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Переменные функции</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="GML_Overview.htm">Обзор GML</a></div>
        <div style="float:right">Следующее: <a data-xref="{title}" href="Commenting_Code.htm">Комментирование кода</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>