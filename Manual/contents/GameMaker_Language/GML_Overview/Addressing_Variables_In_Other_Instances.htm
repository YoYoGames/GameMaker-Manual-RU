<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Обращение к переменным в других случаях</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Обращение к переменным в других случаях</h1>
  <p>В разделах, посвященных <a href="Variables_And_Variable_Scope.htm">переменным</a>, вы узнали, как создавать и использовать переменные в пределах одного экземпляра или в глобальной области видимости, но что произойдет, если вы захотите, чтобы один экземпляр получил доступ к переменной в другом, отличном от него экземпляре? Есть много случаев, когда вы можете захотеть сделать это, например, при столкновении с объектом пули, вы можете захотеть узнать, сколько урона наносит пуля, обратившись к переменной в пуле, или вы можете захотеть остановить движение всех шариков в головоломке, или вы можете захотеть переместить главного героя в определенную позицию, или в любой другой ситуации, с которой вы обычно сталкиваетесь в любой игре. К счастью, <span class="notranslate">GameMaker Language</span> оснащен механизмами для достижения этой цели.</p>
  <p>Один из наиболее распространенных методов доступа к переменной или ее изменения в <em>другом </em>экземпляре заключается в использовании имени объекта в качестве идентификатора, а затем с помощью точки &quot;<span class="inline">.</span>&quot; указать программе <span data-keyref="GameMaker Name">GameMaker</span>, что переменная, на которую делается ссылка, должна быть назначена или изменена в данном конкретном экземпляре объекта. Это известно как &quot;точечная нотация&quot;, и ее синтаксис выглядит следующим образом:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>На практике это будет выглядеть следующим образом:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>С помощью приведенного выше кода вы устанавливаете скорость экземпляра &quot;<span class="inline">obj_ball</span>&quot;. Однако если у вас в комнате более одного экземпляра данного объекта, <em>то этот код будет применяться ко всем им одинаково</em> - если только вы не используете <b>HTML5</b>, в этом случае он будет влиять только на <em>один</em>, но у вас нет возможности узнать, на какой именно - поэтому, если вам нужно получить доступ ко всем экземплярам объекта, вы должны использовать <a href="Language_Features/with.htm"><span class="inline">with()</span></a>так как он на 100% совместим с кроссплатформенным форматом. В общем, этот формат следует использовать только тогда, когда у вас есть единственный экземпляр объекта в комнате, или (как вы увидите в следующей части) когда у вас есть определенный <i> <b>ID</b></i> экземпляра.</p>
  <p>Вы также можете получить доступ к одному экземпляру объекта, если в комнате имеется несколько экземпляров, используя уникальное <b>имя экземпляра</b>, чтобы сообщить <span data-keyref="GameMaker Name">GameMaker</span>, к какому именно экземпляру мы хотим обратиться. <b>Константа имени экземпляра</b> - это уникальная идентификационная константа, которая присваивается каждому экземпляру, добавленному в комнату в вашей игре. Вы можете найти эту константу, дважды щелкнув на экземпляре в <a href="../../The_Asset_Editors/Rooms.htm">редакторе комнат</a>:</p>
  <p><img>Обратите внимание, что это имя можно отредактировать и дать ему более описательное название - хотя оно <em>должно</em> быть уникальным для всей игры - и использовать его в качестве левой части точки:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>Однако наиболее распространенным и практичным методом является использование <i>переменной</i> слева от точки, при условии, что данная переменная<i> хранит действительный <b>идентификатор экземпляра</b></i>. Следующие примеры иллюстрируют это.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if instance_exists(_inst)<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>В приведенном выше коде для примера 1 имеется <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> в блоке кода. Это связано с тем, что использование метода point для доступа или изменения значения другого экземпляра приведет к ошибке и аварийному завершению игры, если экземпляр не существует, а в данном примере есть вероятность, что так и есть. Однако в примерах 2 и 3 проверка не нужна, поскольку мы <i>знаем</i>, что экземпляр существует, так как в примере 2 мы его создали, а в примере 3 - это другой экземпляр в событии столкновения. Однако, если существует <i>вероятность</i> того, что экземпляр может быть уничтожен, деактивирован или иным образом удален из комнаты при использовании этого метода, <i>всегда</i> следует предварительно проверить его с помощью функции <span class="inline">instance_exists()</span> или функции <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> функция.</p>
  <p>Обратите внимание, что вы не можете использовать специальное <a href="Instance_Keywords.htm">ключевое слово</a> &quot;<span class="inline">all</span>&quot; с этим методом, чтобы нацелить все экземпляры (например, <span class="inline">all.val = 10</span> даст ошибку), но вы <i>можете</i> использовать ключевые слова &quot;<span class="inline">other</span>&quot; и &quot;<span class="inline">self</span>&quot; без проблем. Например, использование <span class="inline">other</span> в <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">событии столкновения</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if (other.hp &lt;= 0)<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>Также важно отметить, что нельзя использовать любую функцию саму по себе в качестве левой части присваивания. Например, следующий код приведет к ошибке:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>Возвращаемое значение для выражения в этом примере кода является целым числом (уникальное значение ID для ближайшего экземпляра), поэтому оно должно быть заключено в скобки <span class="inline">()</span>, чтобы использоваться таким образом и правильно обращаться к требуемому экземпляру. Приведенный выше код будет правильно записать как:</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var _inst = instance_nearest(x, y, obj);<br />
    _inst.speed = 0;
  </p>
  <p>Все эти способы чтения, изменения и установки переменных в других экземплярах являются вполне допустимыми и работают потому, что точка на самом деле является <i>оператором</i>. Он принимает значение в качестве левого <a class="glossterm" data-glossterm="операнд" href="#">операнда</a>, переменную в качестве правого операнда и возвращает адрес этой конкретной переменной в указанном объекте или экземпляре. Все имена объектов, константы, идентификаторы и т.д... просто представляют значения, и с ними можно работать как с любыми другими значениями.</p>
  <p>Другой способ ссылаться на переменные в другом экземпляре - использовать функцию <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , которая подробно рассматривается <a href="Language_Features/with.htm">здесь</a>:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if instance_exists(_enemy)<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="GML_Overview.htm">Обзор GML</a></div>
        <div style="float:right">Следующий: <a data-xref="{title}" href="Expressions_And_Operators.htm">Выражения и операторы</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>