<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>dot_product_3d</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product_3d" />
  <meta name="rh-index-keywords" content="dot_product_3d" />
  <meta name="search-keywords" content="dot_product_3d" />
  <meta name="is_pure" content="true" />
</head>

<body>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>dot_product_3d</h1>
  <p>Точечное произведение - это величина, выражающая угловое отношение между двумя векторами, которое находится путем взятия двух векторов, их умножения и последующего сложения. Название &quot;точечное произведение&quot; происходит от центрированной точки &quot;-&quot;
    которая часто используется для обозначения этой операции (альтернативное название &quot;скалярное произведение&quot; подчеркивает скалярную, а не векторную природу результата).</p>
  <p>Фактическая математическая формула может быть записана следующим образом:</p>
  <p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png"/></p>
  <p>В 2D точечное произведение векторов <span class="inline">a[x1,y1]</span> и <span class="inline">b[x2,y2]</span> равно <span class="inline">x1x2 + y1y2</span>, поэтому в 3D точечное произведение векторов <span class="inline">a[x1,y1,z1]</span> и <span class="inline">b[x1,y1,z1]</span> равно <span class="inline">x1x2 + y1y2 + z1z2</span>. Таким образом, dot_product_3d в <span data-keyref="GameMaker Name">GameMaker</span> вычисляется как:</p>
  <p class="code">a · b = (x1*x2) + (y1*y2) + (z1*z2);</p>
  <p>Любопытной особенностью точечного произведения является его связь с углом, образованным входными векторами, который можно выразить как:</p>
  <p class="code">a · b = (length of a) * (length of b) * cos(angle)</p>
  <p>То есть, точечное произведение двух векторов будет равно косинусу угла между этими векторами, умноженному на длину каждого из них. Вот изображение для иллюстрации:</p>
  <p><img alt="Dot Product ilustration" class="center" height="143" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_2.png" width="406"/></p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Более подробную информацию о векторах см. <a href="../../../../Additional_Information/Vectors.htm">здесь</a>.</p>
  <p>Есть несколько вещей, которые мы теперь можем определить по любым двум векторам в зависимости от результата их точечного произведения:</p>
  <ul class="colour">
    <li>Если a и b перпендикулярны (находятся под углом 90 градусов друг к другу), результат точечного произведения будет равен нулю, потому что <span class="inline">cos(ang)</span> будет равен нулю.</li>
    <li>Если угол между a и b меньше 90 градусов, то точечное произведение будет положительным (больше нуля), так как <span class="inline">cos(ang)</span> будет положительным.</li>
    <li>Если угол между a и b больше 90 градусов, то точечное произведение будет отрицательным (меньше нуля), так как <span class="inline">cos(ang)</span> будет отрицательным.</li>
  </ul>
  <p>Что же это значит для тех из нас, кто создает игры? Эта математическая зависимость может быть использована в довольно многих обстоятельствах, но лучший способ увидеть ее - построить реальный сценарий и посмотреть, что происходит. Один из самых простых
    способов сделать это - сгенерировать простую проверку &quot;высоты&quot; для врага, скажем, в платформенной игре, чтобы враг &quot;видел&quot; игрока, если он находится выше плоскости, образованной вектором <i>нормали</i> врага и 3d-полом.</p>
  <p><img>По сути, мы получаем вектор нормали от врага, перпендикулярный полу, а затем мы
    получаем вектор игрока к врагу. Затем мы получим точечный_продукт этих векторов, и если результат положительный, то игрок находится &quot;выше&quot; плоскости пола противника, а если отрицательный, то ниже. Фактический код для обеспечения работы
    приведен в примере ниже.</p>
  <p> </p>
  <h4><b>Синтаксис:</b></h4>
  <p class="code">dot_product_3d(x1, y1, z1, x2, y2, z2)</p>
  <table>
    <tbody>
      <tr>
        <th>Аргумент</th><th>Тип</th>
        <th>Описание</th>
     </tr>
      <tr>
        <td><span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the second vector.</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Возвращается:</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>Пример:</h4>
  <p class="code">var x1, y1, x2, y2;<br/> x1 = 0;<br/> y1 = 1;<br/> z1 = 0;<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;</p>
  <p>Приведенный выше код создает вектор нормали вдоль оси y (вверх) экземпляра, а затем притягивает к себе вектор объекта игрока &quot;o_Player&quot;. Наконец, он вычисляет точечное произведение этих двух векторов и, если оно больше 0, устанавливает переменную
    &quot;above&quot; в true, а если она меньше или равна 0, то устанавливает ее в false.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Angles_And_Distance.htm">Углы и расстояние</a></div>
        <div style="float:right">Следующий: <a href="dot_product_normalised.htm"><span class="notranslate">dot_product_normalised</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_3d
-->
  <!-- TAGS
dot_product_3d
-->

</body></html>