<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physics_joint_wheel_create</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_wheel_create" />
  <meta name="rh-index-keywords" content="physics_joint_wheel_create" />
  <meta name="search-keywords" content="physics_joint_wheel_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_joint_wheel_create</h1>
  <p>Колесный шарнир просто объединяет поршневой и револьверный шарниры, как колесо, установленное на амортизаторе автомобиля. Вы указываете опорную точку для шарнира, а также два экземпляра шарнира с поддержкой физики. Первый экземпляр будет действовать как &quot;тело&quot; шарнира, а второй - как &quot;колесо&quot;, и ему будет позволено свободно перемещаться вокруг оси шарнира. Можно также задать осевой вектор - воображаемую линию, вдоль которой шарнир будет действовать как &quot;пружина&quot;, позволяя колесу подпрыгивать вверх и вниз, сталкиваясь с препятствиями (подобно поршневому шарниру). Следующее изображение иллюстрирует это:</p>
  <p><img>Если вы решите включить двигатель, то второй экземпляр будет вращаться вокруг положения якоря, и вы можете задать максимальный крутящий момент двигателя, используемый для достижения желаемой скорости вращения двигателя (Н/м), а также скорость, с которой двигатель должен вращаться. Поскольку колесный шарнир также имеет ось, вдоль которой он может двигаться, вы можете установить частоту колебаний (в Гц), а также коэффициент демпфирования для шарнира - вам может понадобиться поиграть с этими значениями, чтобы точно настроить их, и рекомендуется начать с меньших значений и увеличивать их до тех пор, пока вы не добьетесь желаемого эффекта.</p>
  <p>Как и со всеми суставами, если вы установите значение &quot;col&quot; <span class="inline">true</span>, то два экземпляра могут взаимодействовать и сталкиваться друг с другом, но <i>только</i> если у них есть события столкновения, однако если установлено значение <span class="inline">false</span>, то они не будут сталкиваться независимо ни от чего.</p>
  <p> </p>
  <h4>Синтаксис:</h4>
  <p class="code">physics_joint_wheel_create(inst1, inst2, anchor_x, anchor_y, axis_x, axis_y, enableMotor, max_motor_torque, motor_speed, freq_hz, damping_ratio, col)</p>
  <table>
    <tbody>
      <tr>
        <th>Аргумент</th>
        <th>Тип</th>
        <th>Описание</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance">Идентификатор экземпляра</span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance">Идентификатор экземпляра</span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">anchor_x</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">The x coordinate where the joint is anchored, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">anchor_y</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">The y coordinate where the joint is anchored, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">axis_x</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">The x component of the wheel axis vector</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">axis_y</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">The y component of the wheel axis vector</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">enableMotor</span></td>
        <td><span data-keyref="Type_Bool">Булево</span></td>
        <td><span class="notranslate">Whether the motor should be active (true) or not (false)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">max_motor_torque</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">motor_speed</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">This is the speed at which the motor should rotate</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">freq_hz</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">This is the oscillation frequency for the joint, in hertz</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">damping_ratio</span></td>
        <td><span data-keyref="Type_Real">Реально</span></td>
        <td><span class="notranslate">This damping ratio for the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">col</span></td>
        <td><span data-keyref="Type_Constant_Colour">Цвет</span></td>
        <td><span class="notranslate">Whether the two instances can collide (true) or not (false)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Возвращается:</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint">Physics Joint ID</span></p>
  <p> </p>
  <h4>Пример:</h4>
  <p class="code">var mainFixture = physics_fixture_create();<br />
    physics_fixture_set_box_shape(mainFixture, 128, 32);<br />
    var wheelFixture = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(wheelFixture, 32);<br />
    var o_id = instance_create_layer(x+25, y + 100, &quot;Instances&quot;, obj_Wheel);<br />
    physics_fixture_bind(mainFixture, id);<br />
    physics_fixture_bind(wheelFixture, o_id);<br />
    physics_joint_wheel_create(id, o_id, o_id.x, o_id.y, 0, 1, true, 10, 1, 15, 6, false);<br />
    physics_fixture_delete(mainFixture);<br />
    physics_fixture_delete(wheelFixture);</p>
  <p>Приведенный выше код создает и определяет два новых приспособления. Затем они привязываются к вызывающему экземпляру и новому экземпляру, который создается перед применением колесного шарнира для их соединения, после чего приспособления удаляются из памяти.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Joints.htm">Суставы</a></div>
        <div style="float:right">Следующий: <a href="physics_joint_weld_create.htm"><span class="notranslate">physics_joint_weld_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_wheel_create
-->
  <!-- TAGS
physics_joint_wheel_create
-->
</body>
</html>