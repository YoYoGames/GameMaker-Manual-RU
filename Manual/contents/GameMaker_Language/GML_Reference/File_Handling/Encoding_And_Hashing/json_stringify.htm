<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>С помощью этой функции вы можете преобразовать одиночные или вложенные структуры и массивы в правильную строку JSON. Вы задаете исходное значение (индекс массива или ссылку на структуру), а затем функция &quot;строчит&quot; его, преобразуя в строку JSON (преобразуя массивы <span class="notranslate">GameMaker</span> в массивы JSON, а структуры <span class="notranslate">GameMaker</span> в объекты JSON).</p>
  <p>При использовании этой функции следует обратить внимание на некоторые важные моменты:</p>
  <ul class="colour">
    <li>Эта функция <em>не </em> преобразует карты DS, списки или любые другие структуры данных в JSON, а просто сохраняет значение внутреннего индекса структуры (что малополезно, так как индекс будет меняться между запусками игры), и поэтому не следует пытаться строчить любые значения, которые могут содержать ссылки на структуры данных (для этого есть <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>Эта функция преобразует практически любое значение в &quot;правильную&quot; строку JSON, однако фактические значения, содержащиеся в строке, могут быть не совсем такими, как вы ожидаете, из-за особенностей работы стандарта JSON:<br>
      <br>
      &quot;JSON не имеет отношения к числам. В любом языке программирования может быть множество типов чисел различной емкости и комплектации, фиксированных или плавающих, двоичных или десятичных. Это может затруднить обмен между различными языками программирования. Вместо этого JSON предлагает только то представление чисел, которое используют люди: последовательность цифр. Все языки программирования знают, как понять последовательность цифр, даже если они не согласны с внутренними представлениями&quot;.<br>
      <br>
      Для получения дополнительной информации см. <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">стандарт ECMA JSON</a>.
    </li>
    <li>Если вы включите int64 в значения для преобразования в JSON, он запишет его как <i>int</i>, если оно находится в допустимом диапазоне для int32, как <i>double</i>, если он может сделать это без потери точности, или (если ни один из этих случаев не применим) как <i>строку</i> с идентификатором &quot;<span class="inline">@i64@</span>&quot; перед ним и &quot;<span class="inline">$i64$</span>&quot; после него. Когда вы снова придете разбирать JSON, <span data-keyref="GameMaker Name">GameMaker</span> перехватит эти идентификаторы и преобразует значение обратно в int64. Это означает, что если JSON предназначен для сервера или другой цели, не связанной с GameMaker, эти значения не подойдут, поэтому их следует избегать.</li>
    <li>Если вы включите <span class="inline">infinity</span>, <span class="inline">-infinity</span> или <span class="inline">NaN</span> в значения для преобразования в JSON, они будут закодированы как строки, поскольку эти значения не являются частью стандарта JSON, и при разборе полученного JSON они <strong>не </strong>будут преобразованы обратно в свои значения времени выполнения и останутся в виде строк. Обратите внимание, что <span class="inline">NaN</span> будет преобразован в &quot;nan&quot; (в нижнем регистре) при структурировании.</li>
    <li>Следует быть осторожным при записи любой возвращаемой строки JSON в файл <span class="inline">ini</span>, так как спецификации <span class="inline">ini</span> могут вызвать проблемы при использовании кавычек и управляющих символов. См. функцию <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a> для получения дополнительной информации.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Синтаксис:</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Аргумент</th>
        <th>Тип</th>
        <th>Описание</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">Структура</span> или <span data-keyref="Type_Array">массив</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
      <tr>
        <td>filter_func</td>
        <td><span data-keyref="Type_Function"><a href="../../../GML_Overview/Script_Functions.htm" target="_blank">Function</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Filter function that processes each item. Syntax: <span class="inline2">function(key, value) -&gt; new_value</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Возвращается:</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>Пример:</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>Приведенный выше код преобразует структуру <span class="inline2">_contents</span> в строку JSON и сохранит ее в переменной. Возвращенная строка будет выглядеть следующим образом:</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Encoding_And_Hashing.htm">Кодирование файлов</a></div>
        <div style="float:right">Следующий: <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>