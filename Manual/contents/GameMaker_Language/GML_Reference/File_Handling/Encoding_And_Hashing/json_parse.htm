<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>Эта функция может быть использована для разбора строки JSON (либо созданной ранее с помощью функции <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a> или из любого корректного источника) и преобразовать ее в коллекцию массивов или структур, где массив - это эквивалент массива JSON, а структура - эквивалент объекта JSON. Вы передаете строку для разбора, и функция возвращает массив или структуру верхнего уровня, которые затем можно использовать в вашем коде. Если вы не уверены в содержимом JSON, вы можете использовать различные <a href="../../Variable_Functions/Variable_Functions.htm">функции переменных</a> (такие как <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a> и <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a> в случае со структурой) для проверки возвращаемого содержимого. Обратите внимание, что попытка разобрать недопустимое значение (т.е. не строку) приведет к ошибке исключения.</p>
  <p>При использовании этой функции следует обратить внимание на некоторые важные моменты:</p>
  <ul class="colour">
    <li>Если предоставленная строка JSON содержит <span class="inline">undefined</span> в качестве значения для какого-либо свойства, то при разборе она будет преобразована в <span class="inline">pointer_null</span>.</li>
    <li>Эта функция позволяет загружать только файлы JSON с максимальным пределом вложенности 128.</li>
  </ul>
  <p> </p>
  <h4>Синтаксис:</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>Аргумент</th><th>Тип</th>
        <th>Описание</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Возвращается:</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>Пример:</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    var data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>Приведенный выше код создает новую строку, содержащую правильный объект JSON, а затем вызывает <span class="inline">json_parse()</span> для преобразования этой строки в структуру <span class="notranslate">GML</span>. Затем он печатает результат в журнал отладки.</p>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Вы заметите, что строка JSON содержит обратную косую черту<span class="inline2">(\</span>) перед каждой двойной кавычкой (<span class="inline2">&quot;</span>) внутри нее:<br>
    <br>
   <span class="inline2">json = &quot;{ \ <strong>&quot; </strong></span>myObj<br>
    <br>
    Это делается для того, чтобы двойная кавычка читалась как реальный символ в строке, а не как часть кода и не закрывала строку преждевременно. Таким образом, мы используем обратную косую черту, чтобы &quot;спасти&quot; двойную кавычку.<br>
    <br>
    Однако если вы загружаете JSON из внешнего файла, нет необходимости экранировать символы в этом файле, и это может привести к ошибкам при разборе.
  </p>
  <hr />
  <p>После разбора приведенной выше строки JSON, если вы знаете ее структуру, вы можете использовать различные <a href="../../Variable_Functions/Variable_Functions.htm">функции переменных</a> для проверки и чтения ее содержимого:</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if (struct_exists(data, &quot;myObj&quot;))<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if (is_struct(data.myObj))<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if (struct_exists(data, &quot;myArray&quot;))<br />
    {<br />
        // Check if it&#39;s an array<br />
        if (is_array(data.myArray))<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>Приведенный выше код разберет заданную строку JSON, выдав следующий консольный вывод:</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Encoding_And_Hashing.htm">Кодирование файлов</a></div>
        <div style="float:right">Следующий: <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>