<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>ref_create</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module">
    //<![CDATA[
    <
    meta name = "rh-authors"
    content = "" / >
      <
      meta name = "topic-comment"
    content = "" / >
      <
      meta name = "rh-index-keywords"
    content = "ref_create" / >
      <
      meta name = "search-keywords"
    content = "ref_create" / >
      <
      meta name = "template"
    content = "assets/masterpages/Manual_Keyword_Page.htt" / >
    //]]>
  </script>
  <meta name="rh-authors" content="Bart Teunis" />
</head>
<body>
  <h1><span data-field="title" data-format="default">ref_create</span></h1>
  <p>This function creates a reference to a <a href="../../GML_Overview/Variables_And_Variable_Scope.htm">Variable</a> in a struct or instance.</p>
  <p>You provide the struct or instance that the variable belongs to, <em>or</em> a reference to it, and the name of the variable (<strong>as a string</strong>), <em>or</em> reference to a variable that stores the name or index.</p>
  <p>For <a data-xref="{title}" href="../../GML_Overview/Arrays.htm">Arrays</a>, an index can be provided as the third argument that tells which index to create a reference to.</p>
  <p>More complex references can be created. For the full list of possibilities, see the examples.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> The value can be changed through the reference in <a data-xref="{title}" href="../Debugging/The_Debug_Overlay.htm">The Debug Overlay</a>.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_warning.hts"> </span> You <em>cannot</em> create references to <a data-xref="{title}" href="../../GML_Overview/Variables/Local_Variables.htm">Local Variables</a>, since they exist only temporarily and cannot be referenced.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">ref_create</span>(dbgrefOrStruct, dbgrefOrIndex[, index]);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>dbgrefOrStruct</td>
        <td><span data-keyref="Type_DbgRef"><a href="ref_create.htm" target="_blank">Reference</a></span> or <span data-keyref="Type_Struct"><a href="../../GML_Overview/Structs.htm" target="_blank">Struct</a></span></td>
        <td>The <a data-xref="{bookmarkText}" href="../../GML_Overview/Structs.htm#struct">struct</a> or <a href="../Asset_Management/Instances/Instances.htm">instance</a> containing the variable to reference, or a reference to it. <span class="inline"><a href="../../GML_Overview/Instance_Keywords.htm">self</a></span> / <span class="inline"><a href="../../GML_Overview/Instance_Keywords.htm">other</a></span> / <span class="inline"><a href="../../GML_Overview/Variables/Global_Variables.htm">global</a></span> are also accepted.</td>
      </tr>
      <tr>
        <td>dbgrefOrIndex</td>
        <td><span data-keyref="Type_DbgRef"><a href="ref_create.htm" target="_blank">Reference</a></span> or <span data-keyref="Type_String"><a href="../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></td>
        <td>The name of the variable <strong>as a string</strong>, or a reference to it</td>
      </tr>
      <tr>
        <td>index</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> The index in the array, if what&#39;s referenced is an <a href="../../GML_Overview/Arrays.htm">array</a></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_DbgRef"><a href="ref_create.htm" target="_blank">Reference</a></span></p>
  <p> </p>
  <h4>Example 1: Basic Reference to an Instance Variable</h4>
  <p class="code">text = &quot;This is some text&quot;;<br />
    ref_to_text = <span data-field="title" data-format="default">ref_create</span>(self, &quot;text&quot;);</p>
  <p>The code above first creates an instance variable <span class="inline2">text</span> in the Create event and then creates a reference to it using <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span>, that&#39;s stored in the variable <span class="inline2">ref_to_text</span>.</p>
  <p> </p>
  <h4>Example 2: Basic Reference to an Array Index</h4>
  <p class="code">array = [1, 2, 3, 4, 5];<br />
    ref_to_index = <span data-field="title" data-format="default">ref_create</span>(self, &quot;array&quot;, 2);</p>
  <p>The code above first creates an array <span class="inline2">array</span> with 5 elements in the instance executing the code. It then creates a reference to index 2 (the third element) using <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span>. The reference is stored in a new instance variable <span class="inline2">ref_to_index</span>.</p>
  <p> </p>
  <h4>Example 3: Complex Reference</h4>
  <p class="code">the_struct = {a: &quot;text&quot;, b: 485};<br />
    ref_to_struct = <span data-field="title" data-format="default">ref_create</span>(self, &quot;the_struct&quot;);<br />
    ref_to_struct_var = <span data-field="title" data-format="default">ref_create</span>(ref_to_struct, &quot;a&quot;);</p>
  <p>The above code first creates a struct <span class="inline2">the_struct</span> in the instance executing the code that has two variables. It then creates a reference to that struct using <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span> that is then passed as the <span class="inline2">dbgrefOrStruct</span> parameter to the next call to <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span>. This last call to <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span> creates a reference to the struct&#39;s variable <span class="inline3_func">a</span> and stores it in a variable <span class="inline2">ref_to_struct_var</span>. The struct itself is passed to the function <em>indirectly</em>, using the reference stored earlier in the variable <span class="inline2">ref_to_struct</span>.</p>
  <p> </p>
  <h4>Example 4: Complex Array Reference</h4>
  <p class="code">array = [3, 4, 1, 7, 8, 2];<br />
    index = 4;<br />
    ref_to_array = <span data-field="title" data-format="default">ref_create</span>(self, &quot;array&quot;);<br />
    ref_to_index = <span data-field="title" data-format="default">ref_create</span>(self, &quot;index&quot;);<br />
    ref_to_array_at_index = <span data-field="title" data-format="default">ref_create</span>(ref_to_array, ref_to_index);</p>
  <p>The above code creates a reference to an array <span class="inline2">array</span> where both the first parameter to <span class="inline3_func"><span data-field="title" data-format="default">ref_create</span></span> (the array to reference) and the second parameter (serving as the index into the array) are themselves references. This means that if you assign a different value to the variable <span class="inline2">index</span> later on, the array element indexed by <span class="inline2">ref_to_array_at_index</span> also changes to the new value set. If you assign an entirely new array to the instance variable <span class="inline2">array</span>, <span class="inline2">ref_to_array_at_index</span> will reference the element at the same index in that array.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Variable_Functions.htm">Variable Functions</a></div>
        <div>Next: <a data-xref="{title}" href="int64.htm">int64</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
ref_create
-->
  <!-- TAGS
ref_create
-->
</body>
</html>