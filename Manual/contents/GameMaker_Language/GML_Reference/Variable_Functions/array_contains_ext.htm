<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_contains_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="array_contains_ext" />
  <meta name="search-keywords" content="array_contains_ext" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">array_contains_ext</span></h1>
  <p>This function checks if the given array (or a part of it) contains any or all of the given values.</p>
  <p>The <span class="inline2">matchAll</span> argument determines if <em>all</em> values should be present in the array (<span class="inline2">true</span>) or if <em>any one</em> of the values will do (<span class="inline2">false</span>).</p>
  <p>The <span class="inline2">values</span> array may contain duplicates. When <span class="inline2">matchAll</span> is enabled, this allows you to check exactly how many occurrences of a value exist in the original array.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_tip.hts"> </span> To check if an array not just <em>contains</em> a value but rather contains a value <em>that satisfies a certain condition</em>, use <span class="inline2"><a data-xref="{title}" href="array_any.htm">array_any</a></span>.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">array_contains_ext</span>(array, values, [matchAll], [offset], [length]);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>array</td>
        <td><span data-keyref="Type_Array"><a href="../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></td>
        <td>The array in which to look for the values</td>
      </tr>
      <tr>
        <td>values</td>
        <td><span data-keyref="Type_Array"><a href="../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></td>
        <td>An array containing the values to look for. Add a value multiple times with the <span class="inline2">matchAll</span> argument set to <span class="inline2">true</span> to require that a value occurs multiple times (see Example 2). Order isn&#39;t taken into account, i.e. the values don&#39;t have to occur in the array in the order they&#39;re listed here.</td>
      </tr>
      <tr>
        <td>matchAll</td>
        <td><span data-keyref="Type_Bool"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> Whether all values should be present in the array (<span class="inline2">true</span>) or any of the values will do (<span class="inline2">false</span>). The default is <span class="inline2">false</span>.</td>
      </tr>
      <tr>
        <td>offset</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> The offset, or starting index, in the array. Defaults to 0. Setting a negative value will count from the end of the array. The starting index will then be <span class="inline2">array_length(array) + offset</span>. See: <a data-xref="{text}" href="Array_Functions.htm#offset_and_length">Offset And Length</a><a data-xref="{text}" href="Array_Functions.htm#h1"> </a></td>
      </tr>
      <tr>
        <td>length</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> The number of elements to traverse. The default is <span class="inline2">array_length() - 1</span>. A negative value will traverse the array backwards (i.e. in descending order of indices, e.g. 2, 1, 0 instead of 2, 3, 4). See: <a data-xref="{text}" href="Array_Functions.htm#offset_and_length">Offset And Length</a><a data-xref="{text}" href="Array_Functions.htm#h1"> </a></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Bool"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></p>
  <p> </p>
  <h4>Example 1: Check if any of the given values is present in an array</h4>
  <p class="code">hand = [&quot;1&quot;, &quot;1&quot;, &quot;4&quot;, &quot;J&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;7&quot;, &quot;10&quot;, &quot;K&quot;, &quot;8&quot;, &quot;7&quot;, &quot;8&quot;, &quot;5&quot;];<br />
    var _high_cards = [&quot;A&quot;, &quot;K&quot;, &quot;Q&quot;, &quot;J&quot;];<br />
    var _any_high_cards = <span data-field="title" data-format="default">array_contains_ext</span>(hand, _high_cards);<br />
    show_debug_message(_any_high_cards);</p>
  <p>The above code first creates an array <span class="inline2">hand</span> with 13 values. It then defines another array <span class="inline2">_high_cards</span> that defines which are considered &quot;high&quot; cards. Next the <span class="inline2">hand</span> array is checked for any of these using <span class="inline2"><span data-field="title" data-format="default">array_contains_ext</span></span> and the result is stored in a temporary variable <span class="inline2">_any_high_cards</span>. Finally a debug message shows the value of the variable <span class="inline2">_any_high_cards</span>.</p>
  <p> </p>
  <h4>Example 2: Check if all values are present in an array</h4>
  <p class="code">inputs = [&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;left&quot;, &quot;up&quot;, &quot;down&quot;, &quot;right&quot;];<br />
    var _required_inputs = [&quot;left&quot;, &quot;left&quot;, &quot;left&quot;];<br />
    var _input_valid = array_contains_ext(inputs, _required_inputs, true);<br />
    show_debug_message(_input_valid);</p>
  <p>The above code creates an array containing a sequence of inputs. Then it creates another array which contains the inputs that make the sequence valid (i.e. having <em>only</em> three occurrences of &quot;left&quot;). It then calls <span class="inline2"><span data-field="title" data-format="default">array_contains_ext</span></span> to validate the inputs array, stores the result in a variable and prints it to the output log.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Array_Functions.htm">Array Functions</a></div>
        <div>Next: <a data-xref="{title}" href="array_sort.htm">array_sort</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
array_contains_ext
-->
  <!-- TAGS
array_contains_ext
-->
</body>
</html>