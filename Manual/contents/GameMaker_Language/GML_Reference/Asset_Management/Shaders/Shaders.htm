<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Шейдеры</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Шейдеры</h1>
  <p>Шейдеры - это невероятно мощный инструмент для манипулирования тем, что и как <a class="glossterm" data-glossterm="визуализированный" href="#">отображается</a> на экране с помощью видеокарты. Поскольку эти крошечные программы выполняются на самой видеокарте, это означает, что они очень быстро обрабатываются, освобождая ценные циклы процессора для более сложной игровой логики.</p>
  <p>Для создания шейдера необходимо написать <b>вершинный шейдер</b> и <b>фрагментный шейдер</b> (также известный как <b>пиксельный шейдер</b>) с помощью <a href="../../../../The_Asset_Editors/Shaders.htm">редактора шейдеров</a>. Даже если (например) вы хотите изменить только положение вершин для рисуемого экземпляра или изменить только значения цвета для пикселей, для работы полного шейдера вам все равно понадобятся <b>обе</b> программы.</p>
  <p class="note"><span class="note">ПРИМЕЧАНИЕ</span> Шейдеры <b>не</b> позволяют изменять значения переменных, которые вы передаете в них, поэтому во всей документации, которая на них ссылается, они будут называться <b>константами шейдера</b>.</p>
  <p>Полный обзор доступных функций и переменных GLSL ES, которые можно использовать для программирования шейдеров, можно найти на <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">справочных страницах OpenGL ES Shading Language (GLSL ES)</a>. Следующая ссылка также полезна, поскольку содержит несколько кратких справочных карточек по API OpenGL ES (обратите внимание, что только две последние карточки применимы к <span data-keyref="GameMaker Name">GameMaker</span>): <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL ES Reference Cards</a>.</p>
  <p>Использовать шейдер в своих проектах очень просто, и для того, чтобы получить от него самое необходимое, требуется всего пара строк кода:</p>
  <p class="code">shader_set(myShader);<br />
    draw_self();<br />
    shader_reset();</p>
  <p>Как видите, они используются так же, как режимы наложения и поверхности, когда вы сначала выбираете (устанавливаете) шейдер, рисуете с его помощью то, что хотите, а затем снова сбрасываете цель рисования. Если вы хотите отобразить весь экран через шейдер, а не только один <span class="notranslate">sprite</span> или фон, вам нужно установить поверхность для захвата текущего вида, а затем передать ее в шейдер (см. раздел " <a href="../../Drawing/Surfaces/Surfaces.htm">Поверхности"</a> для получения дополнительной информации).</p>
  <p class="note"><b>ПРИМЕЧАНИЕ</b>: Шейдеры, как и все, что связано с рисованием, можно <b>использовать только в событии draw</b>. Также стоит отметить, что если вы пытаетесь использовать значение цвета в шейдере, а объект не имеет текстуры, результат получится черным.</p>
  <p>Если используемый шейдер имеет входные значения, они устанавливаются с помощью функций <i>униформы</i>. Сначала нужно получить <i>хэндл</i> униформы (который, по сути, является значением ID для устанавливаемой униформы) с помощью функции <a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a> в <b>событии Create</b> экземпляра, использующего шейдер, а затем сохранить эти дескрипторы в переменных, примерно так:</p>
  <p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
    colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p>
  <p>Когда у вас есть равномерные ручки, их можно установить в коде шейдера для <b>события Draw Event</b> следующим образом:</p>
  <p class="code">shader_set(sShaderDemo5);<br />
    shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
    shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
    draw_sprite(sprite_index,image_index,x+24, y);<br />
    shader_reset();</p>
  <p>И последнее, что следует отметить: хотя шейдеры принимаются на всех платформах, они все же зависят от устройства, и если аппаратное или программное обеспечение устройства не может использовать шейдеры, то вы получите ошибку. Поэтому рекомендуется проверить, что шейдер скомпилирован, прежде чем устанавливать форму или использовать сам шейдер, например, так:</p>
  <p class="code">if (shader_is_compiled(myShader))<br />
    {<br />
        shader_set(myShader);<br />
        draw_self();<br />
        shader_reset();<br />
    }<br />
    else show_debug_message(&quot;Shader failed&quot;);</p>
  <p>В качестве дополнительной проверки вы также можете вызвать функцию <a href="shaders_are_supported.htm"><span class="inline">shaders_are_supported()</span></a> чтобы проверить, поддерживает ли аппаратное обеспечение шейдеры. В общем случае вы должны выполнять эти проверки при запуске игры и сохранять результаты в <a href="../../../GML_Overview/Variables/Global_Variables.htm">глобальной переменной</a>, чтобы затем проверить их позже.</p>
  <p>Важно отметить, что <span data-keyref="GameMaker Name">GameMaker</span> также поддерживает некоторые <b>макросы</b> условной компиляции, которые могут быть использованы в шейдерах GLSL ES, чтобы они могли выполнять альтернативный код на определенных поддерживаемых платформах. Макросы и платформы, на которых они будут генерироваться, показаны в таблице ниже:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Макрос шейдера</th>
        <th>Значение</th>
        <th>Целевая платформа</th>
      </tr>
      <tr>
        <td>_YY_GLSLES_</td>
        <td>1</td>
        <td>Все целевые платформы</td>
      </tr>
      <tr>
        <td>_YY_GLSL_</td>
        <td>2</td>
        <td>Mac и <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td>_YY_HLSL11_</td>
        <td>3</td>
        <td>Windows, UWP, XboxOne</td>
      </tr>
      <tr>
        <td>_YY_PSSL_</td>
        <td>4</td>
        <td>PS4</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>При компиляции проекта <span data-keyref="GameMaker Name">GameMaker</span> на любой из перечисленных платформ с использованием шейдера формата GLSL ES будет сгенерирован <i>один</i> из вышеуказанных макросов, который затем можно будет проверить в коде шейдера следующим образом:</p>
  <p class="code">#ifdef _YY_HLSL11_<br />
    // HLSL shader code here<br />
    #else<br />
    // GLSL shader code here<br />
    #endif</p>
  <p>Если вы новичок в шейдерах или хотите получить более полное руководство по их созданию и использованию в <span data-keyref="GameMaker Name">GameMaker</span>, то обратитесь к следующей странице руководства:</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">Руководство по использованию шейдеров</a></li>
  </ul>
  <p> </p>
  <p>Для рисования и настройки шейдеров доступны следующие функции:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="shader_get_name.htm"><span class="notranslate">shader_get_name</span></a></li>
    <li><a href="shader_get_uniform.htm"><span class="notranslate">shader_get_uniform</span></a></li>
    <li><a href="shader_get_sampler_index.htm"><span class="notranslate">shader_get_sampler_index</span></a></li>
    <li><a href="shader_set.htm"><span class="notranslate">shader_set</span></a></li>
    <li><a href="shader_set_uniform_f.htm"><span class="notranslate">shader_set_uniform_f</span></a></li>
    <li><a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></li>
    <li><a href="shader_set_uniform_i.htm"><span class="notranslate">shader_set_uniform_i</span></a></li>
    <li><a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader_set_uniform_i_array</span></a></li>
    <li><a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader_set_uniform_matrix</span></a></li>
    <li><a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader_set_uniform_matrix_array</span></a></li>
    <li><a href="shader_reset.htm"><span class="notranslate">shader_reset</span></a></li>
    <li><a href="shader_is_compiled.htm"><span class="notranslate">shader_is_compiled</span></a></li>
    <li><a href="shaders_are_supported.htm"><span class="notranslate">shaders_are_supported</span></a></li>
    <li><a href="shader_current.htm"><span class="notranslate">shader_current</span></a></li>
  </ul>
  <p> </p>
  <p>У нас также есть специальная функция, которая определяет глобальное состояние для всех шейдеров:</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm"><span class="notranslate">shader_enable_corner_id</span></a></li>
  </ul>
  <p> </p>
  <p>При работе с текстурными сэмплерами в шейдерах вам понадобится информация об используемой текстуре, и в этом случае вы можете использовать следующие функции:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm"><span class="notranslate">sprite_get_texture</span></a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="notranslate">sprite_get_uvs</span></a></li>
    <li><a href="../Fonts/font_get_texture.htm"><span class="notranslate">font_get_texture</span></a></li>
    <li><a href="../Fonts/font_get_uvs.htm"><span class="notranslate">font_get_uvs</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm"><span class="notranslate">texture_get_width</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm"><span class="notranslate">texture_get_height</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm"><span class="notranslate">texture_get_texel_width</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm"><span class="notranslate">texture_get_texel_height</span></a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm"><span class="notranslate">texture_set_stage</span></a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm"><span class="notranslate">gpu_set_texfilter_ext</span></a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm"><span class="notranslate">gpu_set_texrepeat</span></a></li>
  </ul>
  <p> </p>
  <p>Хотя в данном руководстве <b>не</b> рассматриваются все функции и переменные шейдеров Open GL, оно содержит список тех, которые уникальны для <span data-keyref="GameMaker Name">GameMaker</span>. Эти константы не являются частью спецификации Open GL для шейдеров и предоставляются для упрощения интеграции шейдеров в ваши проекты.</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">Константы шейдера</a></li>
  </ul>
  <p> </p>
  <p>Наконец, <span data-keyref="GameMaker Name">GameMaker</span> позволяет вам определять собственные <b>форматы вершин</b>, на основе которых вы можете создавать свои собственные примитивы. Это может значительно ускорить работу шейдеров или расширить их возможности и создать удивительные эффекты. Информацию об этом вы найдете в следующих разделах:</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Примитивы и форматы вершин</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Asset_Management.htm">Управление активами</a></div>
        <div style="float:right">Следующий: <a href="../Sequences/Sequences.htm">Последовательности</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->
</body>
</html>