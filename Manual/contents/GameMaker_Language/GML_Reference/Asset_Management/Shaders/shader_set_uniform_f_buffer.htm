<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>shader_set_uniform_f_buffer</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Bart Teunis" />
  <meta name="topic-comment" content="Reference page for shader_set_uniform_f_buffer" />
  <meta name="rh-index-keywords" content="shader_set_uniform_f_buffer" />
  <meta name="search-keywords" content="shader_set_uniform_f_buffer" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1><span data-field="title" data-format="default">shader_set_uniform_f_buffer</span></h1>
  <p>With this function you can set the value of a shader uniform to a list of floating point values that are stored in a buffer.</p>
  <p>As floats are represented in a buffer using the <span class="inline2"><a href="../../Buffers/buffer_write.htm">buffer_f32</a></span> data type, this function expects the data in the range given by offset and count to be formatted as consecutive values of this type.</p>
  <div data-conref="../../../../assets/snippets/Note_Set_Uniforms_After_Shader_Set.hts"> </div>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">shader_set_uniform_f_buffer</span>(uniform, buffer, offset, count);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>handle</td>
        <td><span data-keyref="Type_Handle_Shader_Uniform"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm" target="_blank">Shader Uniform Handle</a></span></td>
        <td>The handle to the shader uniform as returned by <span class="inline2"><a data-xref="{title}" href="shader_get_uniform.htm">shader_get_uniform</a></span></td>
      </tr>
      <tr>
        <td>buffer</td>
        <td><span data-keyref="Type_ID_Buffer"><a href="../../../../../GameMaker_Language/GML_Reference/Buffers/buffer_create.htm" target="_blank">Buffer ID</a></span></td>
        <td>The buffer to read the values from</td>
      </tr>
      <tr>
        <td>offset</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The offset (in bytes) in the buffer</td>
      </tr>
      <tr>
        <td>count</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The number of values of type <span class="inline2">buffer_f32</span> to be used (see <a data-xref="{captionText}" href="../../Buffers/buffer_write.htm#table">Buffer Data Type Constant</a>)</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">/// Create Event<br />
    var _values = 4;<br />
    var _size = buffer_sizeof(buffer_f32);<br />
    buffer = buffer_create(_values * _size, buffer_fixed, 1);<br />
    <br />
    buffer_write(buffer, buffer_f32, 1);<br />
    buffer_write(buffer, buffer_f32, 0.7);<br />
    buffer_write(buffer, buffer_f32, 0.9);<br />
    buffer_write(buffer, buffer_f32, 1);<br />
    <br />
    uni_blend_colour = shader_get_uniform(shader_Colorize, &quot;u_vBlendColour&quot;);<br />
    <br />
    <br />
    /// Draw Event<br />
    shader_set(shader_Colorize);<br />
    <span data-field="title" data-format="default">shader_set_uniform_f_buffer</span>(uni_blend_colour, _buffer, 0, 4);<br />
    vertex_submit(global.vb_character, pr_trianglelist, -1);<br />
    shader_reset();<br />
    <br />
    <br />
    /// Clean Up event<br />
    buffer_delete(buffer);
  </p>
  <p>The above code first creates a new buffer <span class="inline2">buffer</span> of a fixed size that has room to store four values (<span class="inline2">_values</span>) of type <span class="inline2">buffer_f32</span>. This is done in an object&#39;s Create event. Four values between 0 and 1 are then <a href="../../Buffers/buffer_write.htm">written</a> to the buffer that represent, in order, the R, G, B and A component of a blend colour. After that a handle is retrieved to a <span class="inline2">uniform vec4 u_vBlendColour;</span> uniform defined in a <a href="Shaders.htm">shader</a> named &quot;shader_Colorize&quot;. Next in the Draw event this shader is set, the four values in the buffer are passed to the shader using <span class="inline2"><span data-field="title" data-format="default">shader_set_uniform_f_buffer</span></span>, and the model in a <a href="../../Drawing/Primitives/vertex_create_buffer.htm">vertex buffer</a> named <span class="inline2">vb_character</span> is submitted (i.e. <em>drawn</em>). After that the shader is reset. Finally in the Clean Up event the buffer is deleted to avoid a memory leak.</p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Shaders.htm">Shaders</a></div>
        <div>Next: <a data-xref="{title}" href="shader_set_uniform_i.htm">shader_set_uniform_i</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
shader_set_uniform_f_buffer
-->
  <!-- TAGS
shader_set_uniform_f_buffer
-->
</body>
</html>