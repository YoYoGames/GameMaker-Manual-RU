<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>wallpaper_set_config</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Reference page for wallpaper_set_config" />
  <meta name="rh-index-keywords" content="wallpaper_set_config" />
  <meta name="search-keywords" content="wallpaper_set_config" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">wallpaper_set_config</span></h1>
  <p>This function sends the configuration for your wallpaper to the companion app. It takes a &quot;settings&quot; array containing your options/sections, where each option/section is a <a href="../../GML_Overview/Structs.htm">struct</a>.</p>
  <h3>Settings Array</h3>
  <p>The array should have the following format: </p>
  <p class="code">array = <br />
    [<br />
        {section_or_option},<br />
        {section_or_option},<br />
        {section_or_option}<br />
    ];</p>
  <p>Each entry in this array is either a <em>section</em> or an <em>option</em>.</p>
  <h3>Section Struct</h3>
  <p>A section struct requires the following format: </p>
  <p class="code">{<br />
        type: &quot;section&quot;,<br />
        name: &quot;unique_identifier&quot;,<br />
        label: &quot;Label for this section in the companion app&quot;,<br />
        children: [{section}, {option}, ...]<br />
    }</p>
  <p><span>The <span class="inline2">children</span> property in a section struct is an <a href="../../GML_Overview/Arrays.htm">array.</a> Each entry in this array is either another section struct or an option struct.</span></p>
  <h3>Option Struct</h3>
  <p>An option struct requires the following format: </p>
  <p class="code">{<br />
        type: &quot;type_of_return_value&quot;,<br />
        name: &quot;unique_identifier&quot;,<br />
        label: &quot;Label for this section in the companion app&quot;<br />
    }</p>
  <p>The following types are allowed for the type property: <span class="inline2">&quot;range&quot;</span>, <span class="inline2">&quot;boolean&quot;</span>, <span class="inline2">&quot;string&quot;</span>, <span class="inline2">&quot;string_multiline&quot;</span>, <span class="inline2">&quot;color&quot;</span> (or <span class="inline2">&quot;colour&quot;</span>), <span class="inline2">&quot;file&quot;</span> and <span class="inline2">&quot;folder&quot;</span>.</p>
  <p>Depending on the type, you must provide extra properties to the option struct: </p>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">&quot;range&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down1">
    <p class="code">{<br />
          type: &quot;range&quot;,<br />
          value: &lt;a number, default value&gt;,<br />
          min: &lt;a number, minimum range value&gt;,<br />
          max: &lt;a number, maximum range value&gt;,<br />
          step: &lt;a number, distance between possible values&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">&quot;boolean&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down2">
    <p class="code">{<br />
          type: &quot;boolean&quot;,<br />
          value: &lt;true or false, default value&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">&quot;string&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down3">
    <p class="code">{<br />
          type: &quot;string&quot;,<br />
          value: &lt;a string, default value&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">&quot;string_multiline&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down4">
    <p class="code">{<br />
          type: &quot;string_multiline&quot;,<br />
          value: &lt;a string that can have newlines, e.g. &quot;Line 1\nLine 2\nLine 3\nLine4&quot;&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">&quot;color&quot; (or &quot;colour&quot;)</a></h3>
  <div class="droptext" data-targetname="drop-down6">
    <p class="code">{<br />
          type: &quot;colour&quot;,<br />
          value: &lt;a colour, default value&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">&quot;file&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down7">
    <p class="code">{<br />
          type: &quot;file&quot;,<br />
          value: &lt;a string containing file path, e.g. &quot;C:\\Users\\MyUser\\Pictures\\MyPicture.png&quot;&gt;<br />
      }</p>
  </div>
  <h3><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">&quot;folder&quot;</a></h3>
  <div class="droptext" data-targetname="drop-down8">
    <p class="code">{<br />
          type: &quot;folder&quot;,<br />
          value: &lt;a string containing a folder path, e.g. &quot;C:\\Users\\MyUser\\Pictures\\&quot;&gt;<br />
      }</p>
  </div>
  <p> </p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">wallpaper_set_config</span>(settings_array);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>settings_array</td>
        <td><span data-keyref="Type_Array"><a href="../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></td>
        <td>An array containing section and option structs as detailed above</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var _config = <br />
    [<br />
        {<br />
            type: &quot;section&quot;,<br />
            name: &quot;animation&quot;,<br />
            label: &quot;Animation&quot;,<br />
            children:<br />
            [<br />
                {<br />
                    type: &quot;range&quot;,<br />
                    name: &quot;speed&quot;,<br />
                    label: &quot;Rotation speed&quot;,<br />
                    value: 50,<br />
                    min: 0,<br />
                    max: 200,<br />
                    step: 25<br />
                },<br />
                {<br />
                    type: &quot;boolean&quot;,<br />
                    name: &quot;clockwiseRotation&quot;,<br />
                    label: &quot;Clockwise rotation&quot;,<br />
                    value: false<br />
                },<br />
                {<br />
                    type: &quot;boolean&quot;,<br />
                    name: &quot;pause&quot;,<br />
                    label: &quot;Pause animation&quot;,<br />
                    value: true<br />
                }<br />
            ]<br />
        },<br />
        {<br />
            type: &quot;section&quot;,<br />
            name: &quot;colours&quot;,<br />
            label: &quot;Colours&quot;,<br />
            children:<br />
            [<br />
               {<br />
                    type: &quot;colour&quot;,<br />
                    name: &quot;blendColor&quot;,<br />
                    label: &quot;Blend colour&quot;,<br />
                    value: #FA1E4E<br />
                },<br />
                {<br />
                    type: &quot;range&quot;,<br />
                    name: &quot;blendAlpha&quot;,<br />
                    label: &quot;Blend alpha&quot;,<br />
                    value: 100<br />
                }<br />
            ]<br />
        }<br />
    ];<br />
    <br />
    <span data-field="title" data-format="default">wallpaper_set_config</span>(_config);
  </p>
  <p>The code above shows an example of the <span class="inline3_func"><span data-field="title" data-format="default">wallpaper_set_config</span></span> function with two sections. The first section contains three options (a range and two booleans) and the second section contains two options (a colour and a range).</p>
  <p>This example initialises the array first in a local variable, and passes that into the function call. You can skip the variable stuff and initialise the array in the function arguments directly if you wish to do so.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Live_Wallpapers.htm">Live Wallpapers</a></div>
        <div>Next: <a href="wallpaper_set_subscriptions.htm">wallpaper_set_subscriptions</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
wallpaper_set_config
-->
  <!-- TAGS
wallpaper_set_config
-->
</body>
</html>