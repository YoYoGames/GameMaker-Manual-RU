<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Функции сценария блока действий</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Article explaining how to make action block script functions" />
  <meta name="rh-index-keywords" content="GML Visual Overview - Action Block Script Functions" />
  <meta name="search-keywords" content="GML Visual Scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Функции сценария блока действий</h1>
  <p>Одним из наиболее важных активов в <a href="../../Introduction/The_Asset_Browser.htm">браузере активов</a> является актив " <a href="../../The_Asset_Editors/Scripts.htm">Сценарий"</a>. Сценарии - это особые активы, поскольку они являются &quot;контейнерами&quot; для пользовательских функций и не вызываются вами непосредственно в игре. Все скрипты имеют <strong>глобальную</strong> область применения и автоматически запускаются <span class="notranslate">GameMaker</span> при запуске игры, поэтому вы можете использовать их для определения глобальных переменных и функций, которые вы хотите использовать в своей игре.</p>
  <p>В каждый скрипт <span class="notranslate">GML</span> Visual можно добавить одну или несколько пользовательских функций, которые создаются с помощью действия <a href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>:</p>
  <p><img>Функции, которые вы определите здесь, будут иметь глобальную область применения и действовать подобно любому встроенному действию <span class="notranslate">GML</span> Visual, то есть: они могут принимать различные значения - или вообще не принимать их - в качестве <a class="glossterm" data-glossterm="аргумент" href="#">аргументов</a>(или параметров), а затем выполнять задачу, возвращая значение или не возвращая ничего, в зависимости от необходимости. Затем вы вызываете функцию в своих играх с помощью действия <a href="../Drag_And_Drop_Reference/Common/Function_Call.htm">Function Call</a> <img>, которое выглядит следующим образом:</p>
  <p><img>Чтобы создать <span class="notranslate">GML</span> визуальный сценарий, достаточно воспользоваться правой кнопкой мыши <img> в любом месте браузера активов и выбрать <strong>Create </strong>then <strong>Script</strong>. Это создаст новый <span class="notranslate">GML</span> визуальный сценарий и откроет окно редактора:</p>
  <p><img>Вы можете дать имя скрипту, щелкнув правой кнопкой мыши <img> на нем в браузере активов и выбрав &quot; <strong>Переименовать&quot; </strong>(или с помощью медленного двойного щелчка левой кнопкой мыши <img>), но учтите, что имя скрипта должно соответствовать общим правилам для активов, то есть начинаться с буквы и содержать только буквы, цифры или символ &quot;_&quot; под баром. Ваш скрипт также будет предварительно заполнен действием <strong>Declare A New Function</strong>, готовым к заполнению, и вы можете добавить дополнительные объявления функций по мере необходимости (один скрипт может содержать несколько функций, что полезно для группировки функций с похожим или связанным использованием вместе).</p>
  <p>Как упоминалось выше, вы можете передать функции ряд аргументов, и она будет использовать их для выполнения задачи, для которой вы ее написали. Чтобы лучше понять это, возьмите, например, любое из встроенных действий и подумайте, как оно работает... Вы помещаете его в событие, передаете ряд значений, и оно заставит ваш экземпляр что-то сделать. Определяемые пользователем функции работают точно так же, с той лишь разницей, что их пишете <em>вы </em>.</p>
  <p>При определении новой функции вы даете ей имя, а также определяете имена аргументов, которые она принимает, если принимает (функции могут не принимать аргументы или принимать несколько аргументов, в зависимости от того, что вам требуется). Если вы задаете имена аргументов, то они будут использоваться в действиях, которые вызывает функция, как <strong>локальные переменные </strong>, содержащие входные значения функции.</p>
  <p>Также хорошей практикой является добавление комментария к действию, который объясняет, что оно делает, следуя <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">правилам JS Doc</a>. Например, рассмотрим эту функцию <span class="inline">set_vec()</span>:</p>
  <p><img>Для вызова приведенного выше сценария достаточно использовать действие <strong>Call Function</strong>, как показано ниже:</p>
  <p><img>Вы можете не только передавать аргументы в функцию, но и просить функцию вернуть значение (используя действие <a href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a> <img> ), поэтому вы можете использовать их, например, для построения методов вычисления или возврата идентификатора экземпляра после сложного обнаружения столкновений или для любых других целей. Однако обратите внимание, что использование return завершает <strong>функцию</strong>, поэтому никакие действия после ее использования выполняться не будут, и это означает, что необходимо тщательно продумать структуру ваших функций.</p>
  <p>Ниже приведена функция <span class="notranslate">GML</span> Visual, которая возвращает значение:</p>
  <p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" /></p>
  <p>Приведенная выше функция просто проверяет все объекты в комнате на предмет их <span class="inline">object_index</span>, и если один из них является объектом игрока, то функция возвращает <span class="inline">true</span> (завершая вызов функции) или <span class="inline">false</span>. Вы можете вызвать эту функцию следующим образом:</p>
  <p><img>Итак, мы вызываем функцию и заставляем ее создать временную (локальную) переменную для хранения возвращаемого значения (которое в данном случае равно <span class="inline">true</span> или <span class="inline">false</span>), а затем эта переменная проверяется и выполняется действие.</p>
  <p>Вы также можете сделать аргументы необязательными и определить значение по умолчанию, тогда в случае, если они не будут предоставлены в вызове функции, вместо них будет использоваться значение по умолчанию. Более подробную информацию см. в <a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">расширенном примере 2</a> действия.</p>
  <p>При создании функций для ваших скриптов <span class="notranslate">GML</span> Visual вы можете использовать все те же действия, что и при добавлении действий в событие объекта, и даже можете вызывать функции изнутри функций, создавая таким образом более &quot;модульный&quot; код действий. Построение скриптов с использованием функций таким образом может сэкономить вам много времени на создание одинаковых последовательностей действий, а также поможет сделать ваши последовательности действий более легкими для чтения и отладки.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../../Content.htm">Указатель</a></div>
        <div style="float:right">Следующий: <a href="Changing_DnD_To_Code.htm">Изменение <span class="notranslate">GML</span> Visual на Code</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>