<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Руководство по использованию блендмодов</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how blendmodes work." />
  <meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes" />
  <meta name="search-keywords" content="blendmodes,blending,blend modes" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Руководство по использованию блендмодов</h1>
  <p>Если вы пользуетесь <span data-keyref="GameMaker Name">GameMaker</span> хоть сколько-нибудь долгое время, вы почти наверняка сталкивались с <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">режимами наложения</a> и, возможно, даже использовали их в своих играх. Режимы наложения - это отличный способ изменить способ рисования, чтобы получить интересные и специфические графические эффекты, но знаете ли вы, как они работают и как их использовать? Эта тема может запутать людей, поэтому в этом разделе мы надеемся развеять некоторые тайны, связанные с режимами наложения, и дать вам возможность использовать их в полной мере в своих играх.</p>
  <p> </p>
  <h2>ОБЗОР</h2>
  <p>Режимы наложения, по сути, указывают вашей игре рисовать определенные вещи, смешивая их с тем, что уже было нарисовано ранее. Все, что вы рисуете на экране, состоит из четырех компонентов - красного, зеленого, синего и альфа, и по умолчанию они рисуются на экране с использованием режима наложения <span class="inline">bm_normal</span>. В этом режиме наложения все пиксели рисуются с неизменными значениями цвета и альфа (хотя далее в этом разделе вы увидите, что это не <em>совсем</em> так...), но в <span data-keyref="GameMaker Name">GameMaker</span> есть несколько встроенных режимов наложения, которые можно установить, чтобы изменить это поведение.</p>
  <p>Когда <span data-keyref="GameMaker Name">GameMaker</span> рисует пиксель, есть <strong>исходный цвет</strong> (цвет пикселя, который вы собираетесь нарисовать) и <strong>конечный цвет</strong> (цвет, который уже есть в пикселе, к которому мы рисуем). При определении нового цвета пикселя <span class="notranslate">GameMaker</span> комбинирует исходный и конечный цвета в соответствии с <strong>режимом наложения</strong>, как упоминалось выше. Каждый компонент цветов хранится как значение с плавающей точкой между 0 и 1, а новый цвет вычисляется путем умножения каждого компонента исходного цвета на некоторый коэффициент и умножения каждого компонента цвета назначения на другой коэффициент, а затем сложения результатов по компонентам.</p>
  <p> </p>
  <h2>ОСНОВНЫЕ РЕЖИМЫ НАЛОЖЕНИЯ</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> использует функцию <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a> для изменения смешивания, используемого вашей игрой для рисования. Вы должны вызвать эту функцию перед (например) рисованием <span class="notranslate">sprite</span>, а затем установить ее обратно, примерно так:</p>
  <p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Этот код рисует экземпляр <span class="notranslate">sprite</span> с использованием <strong>аддитивного </strong>режима наложения. Аддитивный режим наложения устанавливается с помощью одной из доступных констант <span class="notranslate">GML</span>, которых четыре для основных режимов:</p>
  <p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p>
  <p>Мы уже видели, как выглядит <span class="inline">bm_normal</span> - ведь именно он используется по умолчанию! - Так что давайте продолжим и рассмотрим остальные три более подробно...</p>
  <p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Этот режим наложения складывает цвета исходного и конечного пикселей вместе (но не влияет на альфа-значения). Например, если ваше фоновое изображение - сплошной цвет со значением RGB (100,15,70), а затем вы рисуете прямоугольник со значением RGB (120,25,30), то (при использовании bm_add) конечные значения RGB для каждого пикселя прямоугольника будут (220,40,100). Обратите внимание, что значения цвета не могут быть больше 255 (или меньше 0), поэтому все, что в сумме превышает это значение, будет ограничено 255.</p>
    <p class="dropspot"><img>Использование этого режима наложения - отличный способ добиться эффекта &quot;неонового свечения&quot;, и чаще всего он используется для световых эффектов, лазеров или всего того, что должно выглядеть светящимся или люминесцирующим.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Этот режим наложения немного отличается от предыдущего, так как он работает на основе процента, а не прямого значения. Этот процент и будет вычитаться из конечного цвета (цвета пикселя, на который накладывается рисунок). Чтобы лучше объяснить это, давайте рассмотрим пример.</p>
    <p class="dropspot"><img>Представьте, что вы хотите уменьшить значение красного цвета всех пикселей, нарисованных в области комнаты, на 25%. Сначала вам нужно получить 25% от 255, затем преобразовать это значение в значение цвета RGB, а затем использовать его вместе с bm_subtract для обводки области. Примерно так:</p>
    <p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p>
    <p class="dropspot">Следуя тому же правилу, если бы вы хотели просто уменьшить яркость фона на 50%, вы бы использовали цвет, состоящий из 50% красного, 50% зеленого и 50% синего, т.е. RGB (128, 128, 128). Этот режим наложения в основном используется для рисования теней или создания интересных эффектов затухания.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Этот режим наложения сложнее объяснить, но в основном он умножает исходные цвета на исходную альфу, затем добавляет их к значениям конечного цвета, умноженным на обратные значения исходного цвета. О математике, лежащей в основе bm_max (и других режимов наложения), мы расскажем во второй части нашей статьи, но все, что вам нужно знать, это то, что результатом будет более &quot;насыщенный&quot; и яркий цвет, не приводящий к такому же чистому белому блеску, как при использовании <span class="inline">bm_add</span>.</p>
    <p class="dropspot"><img>Этот режим наложения может быть полезен, когда нужно нарисовать перекрывающиеся изображения так, чтобы они не стали настолько яркими, что их нельзя было бы увидеть. Яркие части станут ярче, но они должны сохранять уровень цвета и оттенка. Обратите внимание, что альфа-значение исходного изображения также будет влиять на конечный эффект при использовании этого режима наложения.</p>
  </div>
  <p> </p>
  <p>Теперь вы знаете самые основы использования режима наложения в <span data-keyref="GameMaker Name">GameMaker</span>. Он берет значения RGB и альфа для исходного изображения (то, что рисуется), а затем смешивает их со значениями RGB и альфа для конечного изображения (то, что тоже рисуется). Это смешивание выполняется путем умножения отдельных компонентов для каждого цвета пикселя и альфа на разное количество, в зависимости от эффектов, которых мы хотим достичь. С этими знаниями вы можете начать использовать режимы наложения в своих играх, чтобы получить светящиеся лазеры, реалистичные тени или насыщенные эффекты перехода, но вам еще многое предстоит узнать! Ниже мы рассмотрим <strong>расширенные режимы наложения</strong>, а также изучим немного математики, стоящей за ними, чтобы вы могли создавать свои собственные эффекты наложения, такие как умножение или наложение.</p>
  <p> </p>
  <h2>Расширенные режимы смешивания</h2>
  <p>Выше мы говорили о функции <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>, но теперь мы рассмотрим <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>. Это (как следует из названия) расширенная функция для установки <em>пользовательских </em>режимов наложения, но как это работает? Давайте сначала посмотрим на сухой технический ответ, прежде чем двигаться дальше:</p>
  <ul class="colour">
    <li>Функция <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> указывает, какой режим наложения использовать для исходного и конечного цвета. Новый цвет представляет собой некоторый коэффициент, умноженный на исходный цвет, и другой коэффициент, умноженный на конечный цвет. Эти коэффициенты задаются с помощью данной функции. Чтобы понять это, источник и место назначения имеют красный, зеленый, синий и альфа-компонент. Таким образом, <strong>источник </strong>- это (<span class="inline">Rs, Gs, Bs, As</span>), а <strong>место назначения </strong>- это (<span class="inline">Rd, Gd, Bd, Ad</span>). Считается, что все значения лежат между 0 и 1.</li>
  </ul>
  <p>Хотя этот текст верен и объясняет, что делают режимы наложения, он не совсем интуитивно понятен... поэтому давайте разберемся немного подробнее и объясним, что это такое.</p>
  <p>Когда мы говорим об <strong>источнике </strong>, мы имеем в виду цвет и альфа-значения рисуемого пикселя, а когда мы говорим о <strong>месте назначения </strong>, мы имеем в виду цвет и альфа-значения пикселя, поверх которого он рисуется. Чтобы упростить задачу, мы можем записать исходный цвет в виде его компонентов, например, так:</p>
  <ul class="colour">
    <li><span class="inline">(Rs, Gs, Bs, As)</span> = RGB и Alpha цвета, которым вы собираетесь рисовать.</li>
  </ul>
  <p>И место назначения будет таким:</p>
  <ul class="colour">
    <li><span class="inline">(Rd, Gd, Bd, Ad)</span> = RGB и Alpha цвета, на котором вы собираетесь рисовать.</li>
  </ul>
  <p>Поэтому, когда мы рисуем что-то на экране, наш графический процессор фактически делает следующее для каждого отдельного пикселя:</p>
  <p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p>
  <p> <strong>Коэффициенты смешивания</strong>, упомянутые выше, определяются в <span data-keyref="GameMaker Name">GameMaker</span> рядом констант <span class="notranslate">GML</span>, каждая из которых представляет собой коэффициент, на который следует умножить исходные или конечные значения R, G, B и A. Доступны следующие коэффициенты:</p>
  <ul class="colour">
    <li><span class="inline">bm_zero</span>: Коэффициент смешивания равен (0, 0, 0, 0, 0)</li>
    <li><span class="inline">bm_one</span>: Коэффициент смешивания равен (1, 1, 1, 1, 1)</li>
    <li><span class="inline">bm_src_colour</span>: Коэффициент смешивания (Rs, Gs, Bs, As)</li>
    <li><span class="inline">bm_inv_src_colour</span>: Коэффициент смешивания (1-Rs, 1-Gs, 1-Bs, 1-As)</li>
    <li><span class="inline">bm_src_alpha</span>: Коэффициент смешивания составляет (As, As, As, As, As)</li>
    <li><span class="inline">bm_inv_src_alpha</span>: Коэффициент смешивания составляет (1-As, 1-As, 1-As, 1-As, 1-As)</li>
    <li><span class="inline">bm_dest_alpha</span>: Коэффициент смешивания - (Ad, Ad, Ad, Ad, Ad)</li>
    <li><span class="inline">bm_inv_dest_alpha</span>: Коэффициент смешивания составляет (1-Ad, 1-Ad, 1-Ad, 1-Ad, 1-Ad)</li>
    <li><span class="inline">bm_dest_colour</span>: Фактор смешивания - (Rd, Gd, Bd, Ad)</li>
    <li><span class="inline">bm_inv_dest_colour</span>: Коэффициент смешивания (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li>
    <li><span class="inline">bm_src_alpha_sat</span>: Коэффициент смешивания (f, f, f, 1); f = min(As, 1-Ad)</li>
  </ul>
  <p>Четыре &quot;основных&quot; режима наложения, которые есть в <span data-keyref="GameMaker Name">GameMaker</span>, на самом деле являются композициями двух из этих факторов наложения.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Пример работы bm_normal</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Пришло время рассмотреть практический пример того, как это сочетается для рисования в <span data-keyref="GameMaker Name">GameMaker</span>. Для этого мы рассмотрим bm_normal, который является действительно:</p>
    <p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p>
    <p class="dropspot">Одна из проблем, с которой сталкиваются люди при работе с режимами наложения, - это визуализация результатов, поэтому, чтобы показать математику, лежащую в их основе, мы будем использовать этот режим наложения в качестве подопытного, поскольку он используется всеми чаще всего, и мы точно знаем, чего от него ожидать. Представьте, что мы рисуем прямоугольник с цветом (128, 255, 64, 255) на фоне с цветом (64, 128, 255, 255):</p>
    <p class="dropspot"><img>Итак, наш режим наложения выглядит следующим образом:</p>
    <p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p>
    <p class="dropspot">Как вы видите, мы умножаем конечные значения на 0, что дает им значение 0, что означает, что исходные цвета остаются неизменными, поэтому наше окончательное значение цвета равно <strong>(128, 255, 64, 255)</strong>. Вы можете видеть, как включение альфы влияет и на это значение:</p>
    <p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p>
    <p class="dropspot">Это дает конечный цвет пикселя (96, 192, 159, 192) и позволяет получить изображение, подобное показанному ниже:</p>
    <p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /></p>
    <p class="dropspot">Надеюсь, теперь вы ясно видите, что делают факторы режима наложения и как их сочетание может изменить нарисованное изображение, создавая интересные эффекты. Теперь мы рассмотрим практический пример того, как комбинировать эти факторы для создания собственных режимов наложения.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p>Теперь вы знаете, как работает настройка режимов наложения и видели пример ее использования в повседневном рисовании, давайте рассмотрим кое-что более сложное...</p>
  <p> </p>
  <h2>СОЗДАНИЕ СОБСТВЕННЫХ РЕЖИМОВ НАЛОЖЕНИЯ</h2>
  <p>Используя различные доступные факторы, вы можете создавать собственные режимы наложения для достижения недоступных в обычных условиях вариантов смешивания. В этом примере мы создадим эффект <strong>умножения </strong>, подобный тому, что используется в Photoshop. Мы можем смоделировать этот режим наложения с помощью двух вышеупомянутых констант коэффициентов режима наложения следующим образом:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p>
  <p>Прежде чем мы нарисуем что-то, используя этот режим наложения, давайте посмотрим, как это должно выглядеть в Photoshop:</p>
  <p><img>Используя расширенный режим наложения, мы получаем следующее:</p>
  <p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p>
  <p>Коэффициент смешивания <span class="inline">bm_zero</span> фактически удаляет цвет назначения из уравнения (так как ноль на ноль - это ноль), поэтому у нас остается исходный цвет, умноженный на коэффициент смешивания цвета назначения, отсюда и название &quot;multiply&quot; для режима. Чтобы использовать этот режим в <span data-keyref="GameMaker Name">GameMaker</span>, в <strong>событии Draw Event</strong> нужно просто написать что-то вроде этого:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Следующее изображение было получено из тестового проекта в <span class="notranslate">GameMaker</span> с использованием именно этого кода:</p>
  <p><img>Можете ли вы заметить разницу? Скорее всего, нет! Правда, будет некоторое отклонение между двумя режимами из-за различий между используемыми инструментами рендеринга, но это почти то, что вы ожидаете. Обратите внимание, что не все режимы наложения, используемые в художественных программах, доступны вам в <span data-keyref="GameMaker Name">GameMaker</span>, поскольку некоторые из них могут заставить значения цвета превысить 255 и таким образом создать специальные эффекты, но это не значит, что вы не сможете создать с их помощью достойные имитации этих эффектов или даже совершенно новые эффекты.</p>
  <p>Стоит отметить, что в <span data-keyref="GameMaker Name">GameMaker</span> вы можете сделать еще один шаг вперед, используя функцию <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span>. Она позволяет отделить альфа-компонент от различных коэффициентов режима наложения и использовать их по отдельности для создания еще большего количества возможных комбинаций. Мы не будем рассматривать эту функцию здесь, так как она подробно описана в руководстве, но о ней стоит упомянуть, чтобы вы знали, что она доступна для использования.</p>
  <p> </p>
  <h2>ПОВЕРХНОСТИ И АЛЬФА</h2>
  <p>И последнее, что стоит отметить о режимах наложения, это то, как они влияют на <strong>альфа-компонент </strong>цвета. Когда вы просто рисуете на <a class="glossterm" data-glossterm="поверхность нанесения" href="#">поверхности приложения</a> или в <a class="glossterm" data-glossterm="буфер дисплея" href="#">буфере дисплея</a>, вам не нужно принимать во внимание значение альфа-коэффициента назначения, поскольку оно <em>всегда </em>будет равно единице. Однако поверхности, которые вы создаете сами, отличаются, поскольку вы можете очистить поверхность, чтобы она имела любое значение альфа от нуля до единицы. Это приводит к некоторым интересным эффектам, которые противоречат ожиданиям большинства людей.</p>
  <p>Чтобы проиллюстрировать это, мы рассмотрим рисование с использованием базового значения по умолчанию <span class="inline">bm_normal</span>. Большинство людей думают, что если очистить поверхность до альфа 0, а затем нарисовать что-то с альфа 0,5, то результирующее значение альфа тоже будет 0,5... <strong>но это не</strong> так, и многие считают это &quot;ошибкой&quot; в том, как <span data-keyref="GameMaker Name">GameMaker</span> делает рендеринг. Однако, как вы увидите, это вовсе не ошибка!</p>
  <p>Допустим, у вас есть поверхность, каждый пиксель которой имеет альфа 0, затем вы рисуете на ней круг с альфа 0,5, используя режим наложения <span class="inline">bm_normal</span>. Вся поверхность по-прежнему будет иметь альфа 0, но в круге альфа будет 0,25, так как:</p>
  <p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p>
  <p>Если в существующем круге нарисовать еще один круг, также с альфой 0,5, то альфа за пределами кругов будет равна 0, между кругами - 0,25, а в меньшем круге - 0,375:</p>
  <p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p>
  <p>Если бы вы продолжили рисовать ряд кругов с альфа 0,5 к поверхности с альфа 0, а затем нарисовали бы эту поверхность в комнате, вы бы смогли ясно увидеть это:</p>
  <p><img>Если вы все еще немного не понимаете, что такое альфа, попробуйте представить его как еще один цвет. Он ведет себя как цвет, и все вычисления с ним выполняются аналогичным образом. Он просто не очень заметен, хотя влияние, которое он оказывает на другие цвета, заметно. Это подводит нас к последнему моменту, на который следует обратить внимание при использовании поверхностей и режимов наложения (даже <span class="inline">bm_normal</span>)...</p>
  <p>Даже если альфа поверхности равна 0, <em><strong>цветовые компоненты все еще существуют и будут влиять на все операции смешивания.</strong></em>. Поэтому при рисовании на очищенной поверхности с нулевой альфой, которая была очищена с помощью красного цвета (например), исходные цвета смешаются с конечными цветами и дадут эффект, отличный от того, который вы можете себе представить. Приведенное выше изображение было создано на поверхности, очищенной до черного цвета, на черном фоне, но если мы очистим поверхность до красного цвета, то получим следующее:</p>
  <p><img>Надеюсь, теперь вы сможете сами разобраться, почему так происходит, используя формулы, которые я описал выше, и применяя соответствующие цифры для <span class="inline">bm_normal</span>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Additional_Information.htm">Дополнительная информация</a></div>
        <div style="float:right">Следующий: <a href="Error_Reporting.htm">Отчеты об ошибках</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>