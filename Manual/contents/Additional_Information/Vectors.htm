<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Векторы</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Векторы</h1>
  <p>В какой-то момент при создании игры любой сложности вам наверняка придется иметь дело с <strong>векторами</strong>. Они используются в физике, в искусственном интеллекте, в тригонометрии и во многих других ситуациях, но что такое вектор? Проще говоря, вектор - это <em>направленная величина</em>. Давайте начнем с рассмотрения одномерного вектора - это то же самое, что и одно число - нарисуем пронумерованную линию со стрелкой, начинающейся на нуле и заканчивающейся на 5. Это вектор &quot;a&quot;, который равен 5, а если мы нарисуем другую стрелку, начинающуюся на 5 и заканчивающуюся на 8, то получим вектор &quot;b&quot;, равный 3:</p>
  <p><img>Вы должны понимать, что не имеет значения, где начинается вектор, важно лишь то, какой он длины и в каком направлении движется. Так, вектор &quot;b&quot; начинается с 5, имеет длину 3 единицы и направлен вправо, что делает его идентичным вектору, начинающемуся с 0 и идущему в направлении 3. Теперь вы можете сложить эти векторы вместе, положив два вектора &quot;a&quot; и &quot;b&quot; один на другой, чтобы получить вектор &quot;c&quot;, равный 8. А как насчет отрицательных чисел? Если на рисунке выше вектор, направленный вправо, соответствует положительному числу, то вектор, направленный влево, соответствует отрицательному числу, что делает одномерный вектор не более чем знаковым (+/-) числом. Это объясняет основную концепцию вектора: важны только <em>длина</em> и <em>направление</em> (&quot;влево&quot; или &quot;вправо&quot; в данном случае), но не положение.</p>
  <p>А как насчет двумерных векторов? Ну, мы можем думать о них как о состоящих не только из &quot;лево&quot; и &quot;право&quot;, но и из &quot;вверх&quot; и &quot;вниз&quot;:</p>
  <p><img>Теперь это еще не совсем векторы, так как мы должны уменьшить их, используя начальные и конечные координаты. Рассматривая вектор &quot;a&quot;, мы видим, что его начальная координата [2,2], а конечная [4,3], поэтому, чтобы получить вектор, мы должны уменьшить его, вычитая конечную координату из начальной следующим образом:</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>Теперь сделаем то же самое для вектора b:</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>Заметили что-нибудь? Эти два вектора одинаковы! Это еще одна демонстрация того, что вектор не имеет положения, только направление и длину, и мы можем нарисовать эти векторы относительно друг друга вокруг локальной оси [0,0]:</p>
  <p><img>Это означает, что двумерный вектор определяется двумя значениями - &quot;x&quot; и &quot;y&quot; относительно локальной оси [0,0]. А как насчет трехмерных векторов? Ну, у них есть дополнительное измерение &quot;глубина&quot;, с которым нужно бороться, и они будут вычисляться как позиции &quot;x&quot;, &quot;y&quot; и &quot;z&quot; вокруг локальной оси примерно так:</p>
  <p><img>Хорошим примером вектора, используемого в <span data-keyref="GameMaker Name">GameMaker</span>, является физическое свойство <strong>гравитации</strong> в редакторе комнат. Гравитация рассчитывается как вектор вокруг позиции [0,0]. Так, если вы определите гравитацию как [x0, y10], сила тяжести будет <em>равна</em> 10.</p>
  <p>Обычно векторы можно использовать во многих ситуациях, но иногда требуется ограничить их значение (например, при работе с углами), поэтому мы их <strong>нормализуем </strong>. По сути, это математический прием, который используется для преобразования вектора длины <em>n</em> в вектор длины 1, то есть компоненты вектора <em>нормируются </em>на значения от 0 до 1. Такие векторы также называются <strong>единичными векторами</strong>:</p>
  <p><img>Чтобы вычислить нормализованный вектор, мы должны сначала получить исходные компоненты вектора, затем использовать их для получения длины вектора. Затем мы делим каждую из компонент вектора на эту длину, чтобы получить нормализованные компоненты вектора, которые образуют нормализованный вектор, в котором <strong>сумма квадратов всех координат равна 1</strong>. Вот как это делается:</p>
  <p><img>Сначала мы берем координаты вектора и получаем его компоненты:</p>
  <p class="code">vx = (x2 - x1) = (7 - 1) = 6<br />
    vy = (y2 - y1) = (4 - 1) = 3</p>
  <p>Затем мы используем эти значения для расчета длины вектора:</p>
  <p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p>
  <p>Теперь, это дает нам точную длину вектора &quot;a&quot;, поэтому давайте используем ее для нормализации двух компонентов вектора <span class="inline">vx</span> и <span class="inline">vy</span>:</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>Отлично! Теперь мы нормализовали компоненты вектора! Но какое практическое применение это имеет в контексте <span data-keyref="GameMaker Name">GameMaker</span>? Хорошо, давайте приведем практический пример...</p>
  <p>Допустим, у вас есть игра, в которой игрок должен стрелять во врага, и вам нужно знать, насколько объект с пулей должен перемещаться вдоль оси x и y каждый шаг, чтобы попасть в него:</p>
  <p><img>Для этого нужно использовать координаты игрока и противника, чтобы получить компоненты вектора и его длину, затем нормализовать их, чтобы получить значение между 0 и 1, которое в итоге нужно умножить на скорость, с которой пуля должна двигаться на каждом шаге. Эти два последних значения вы должны сохранить и добавить к начальным координатам x и y на каждом шаге. Звучит сложно? Это не так, посмотрите (для простоты значения были округлены до одного десятичного знака):</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>Итак, чтобы попасть в цель, нам нужно каждый шаг добавлять 3 к координате x пули и 4 к ее координате y.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Additional_Information.htm">Дополнительная информация</a></div>
        <div style="float:right">Следующее: <a href="Guide_To_Using_Buffers.htm">Руководство по использованию буферов</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>